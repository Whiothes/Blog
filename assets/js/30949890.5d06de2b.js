"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1809],{84370:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>a,toc:()=>l});var r=n(74848),s=n(28453);const i={},o="\u7b2c 12 \u7ae0 \u5185\u5b58\u7ba1\u7406",a={id:"TOC/computer/kernel/lkd/ch12",title:"\u7b2c 12 \u7ae0 \u5185\u5b58\u7ba1\u7406",description:"\u5185\u5b58\u9875\u8868//docs.kernel.org/mm/page_tables.html",source:"@site/docs/TOC/computer/kernel/lkd/ch12.md",sourceDirName:"TOC/computer/kernel/lkd",slug:"/TOC/computer/kernel/lkd/ch12",permalink:"/docs/TOC/computer/kernel/lkd/ch12",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"\u7b2c 8 \u7ae0 \u4e0b\u534a\u90e8\u548c\u63a8\u540e\u6267\u884c\u7684\u5de5\u4f5c",permalink:"/docs/TOC/computer/kernel/lkd/ch08"},next:{title:"System",permalink:"/docs/category/system"}},c={},l=[{value:"12.1 \u9875",id:"121-\u9875",level:2}];function d(e){const t={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"\u7b2c-12-\u7ae0-\u5185\u5b58\u7ba1\u7406",children:"\u7b2c 12 \u7ae0 \u5185\u5b58\u7ba1\u7406"})}),"\n",(0,r.jsxs)(t.blockquote,{children:["\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"\u5185\u5b58\u9875\u8868"}),": ",(0,r.jsx)(t.a,{href:"https://docs.kernel.org/mm/page_tables.html",children:"https://docs.kernel.org/mm/page_tables.html"})]}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"121-\u9875",children:"12.1 \u9875"}),"\n",(0,r.jsxs)(t.p,{children:["v6.7.0 ",(0,r.jsx)(t.code,{children:"<linux/mm_types.h>"})]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-c",children:"struct page {\n\tunsigned long flags;\t\t/* Atomic flags, some possibly\n\t\t\t\t\t * updated asynchronously */\n  \n  /* union \u5220\u53bb\u4e86 union */\n  \n\t/* Usage count. *DO NOT USE DIRECTLY*. See page_ref.h */\n\tatomic_t _refcount;\n\n#ifdef CONFIG_MEMCG\n\tunsigned long memcg_data;\n#endif\n\n\t/*\n\t * On machines where all RAM is mapped into kernel address space,\n\t * we can simply calculate the virtual address. On machines with\n\t * highmem some memory is mapped into kernel virtual memory\n\t * dynamically, so we need a place to store that address.\n\t * Note that this field could be 16 bits on x86 ... ;)\n\t *\n\t * Architectures with slow multiplication can define\n\t * WANT_PAGE_VIRTUAL in asm/page.h\n\t */\n#if defined(WANT_PAGE_VIRTUAL)\n\tvoid *virtual;\t\t\t/* Kernel virtual address (NULL if\n\t\t\t\t\t   not kmapped, ie. highmem) */\n#endif /* WANT_PAGE_VIRTUAL */\n\n#ifdef LAST_CPUPID_NOT_IN_PAGE_FLAGS\n\tint _last_cpupid;\n#endif\n\n#ifdef CONFIG_KMSAN\n\t/*\n\t * KMSAN metadata for this page:\n\t *  - shadow page: every bit indicates whether the corresponding\n\t *    bit of the original page is initialized (0) or not (1);\n\t *  - origin page: every 4 bytes contain an id of the stack trace\n\t *    where the uninitialized value was created.\n\t */\n\tstruct page *kmsan_shadow;\n\tstruct page *kmsan_origin;\n#endif\n} _struct_page_alignment;\n"})})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>a});var r=n(96540);const s={},i=r.createContext(s);function o(e){const t=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(i.Provider,{value:t},e.children)}}}]);