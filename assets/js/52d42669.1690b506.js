"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3897],{32535:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>l,contentTitle:()=>c,default:()=>p,frontMatter:()=>o,metadata:()=>r,toc:()=>h});const r=JSON.parse('{"id":"TOC/computer/system/apue/ch09","title":"Chapter 9. Process Relationships","description":"9.3 Network Logins","source":"@site/docs/TOC/computer/system/apue/ch09.md","sourceDirName":"TOC/computer/system/apue","slug":"/TOC/computer/system/apue/ch09","permalink":"/docs/TOC/computer/system/apue/ch09","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Chapter 8. Process Control","permalink":"/docs/TOC/computer/system/apue/ch08"},"next":{"title":"Chapter 10. Signals","permalink":"/docs/TOC/computer/system/apue/ch10"}}');var i=n(74848),t=n(28453);const o={},c="Chapter 9. Process Relationships",l={},h=[{value:"9.3 Network Logins",id:"93-network-logins",level:2},{value:"9.4 Process Groups",id:"94-process-groups",level:2},{value:"9.5 Sessions",id:"95-sessions",level:2},{value:"9.6 Controlling Terminal",id:"96-controlling-terminal",level:2},{value:"9.7 <code>tcgetpgrp</code>, <code>tcsetgrp</code>, and <code>tcgetsid</code> Functions",id:"97-tcgetpgrp-tcsetgrp-and-tcgetsid-functions",level:2},{value:"9.8 Job Control",id:"98-job-control",level:2},{value:"9.10 Orphaned Process Groups",id:"910-orphaned-process-groups",level:2},{value:"Example",id:"example",level:3},{value:"9.11 FreeBSD Implementation",id:"911-freebsd-implementation",level:2}];function d(e){const s={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.header,{children:(0,i.jsx)(s.h1,{id:"chapter-9-process-relationships",children:"Chapter 9. Process Relationships"})}),"\n",(0,i.jsx)(s.h2,{id:"93-network-logins",children:"9.3 Network Logins"}),"\n",(0,i.jsxs)(s.p,{children:["With the terminal logins, ",(0,i.jsx)(s.code,{children:"init"})," knows which terminal devices are enabled for logins and spawns a ",(0,i.jsx)(s.code,{children:"getty"})," process for each device. We have a process waiting for each possible login.\nWith the network logins, all the logins come through the kernel's network interface drivers. We have to wait for a network connection request to arrive."]}),"\n",(0,i.jsx)(s.h2,{id:"94-process-groups",children:"9.4 Process Groups"}),"\n",(0,i.jsx)(s.p,{children:"Each process belongs to a process group. A process group is a collection of one or more processes, usually associated with the same job"}),"\n",(0,i.jsx)(s.h2,{id:"95-sessions",children:"9.5 Sessions"}),"\n",(0,i.jsx)(s.p,{children:"A sessions is a collection of one or more process groups."}),"\n",(0,i.jsxs)("div",{style:{textAlign:"center"},children:[(0,i.jsx)(s.p,{children:(0,i.jsx)(s.img,{src:n(20698).A+"",width:"729",height:"266"})}),(0,i.jsx)(s.p,{children:(0,i.jsx)(s.em,{children:"Figure 9.6 Arrangement of processes into process groups and sessions"})})]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-c",children:"\n#include <unistd.h>\n\n/*\n * return process group ID if OK, -1 on error\n */\npid_t setsid(void);\n\n/*\n * return session leader's process group ID if OK, -1 on error\n */\npid_t getsid(pid_t pid);\n"})}),"\n",(0,i.jsxs)(s.ol,{children:["\n",(0,i.jsxs)(s.li,{children:["The process becomes ",(0,i.jsx)(s.em,{children:"session leader"})," of this new session. ( _",(0,i.jsx)(s.em,{children:"A session leader is the process that creates a session"}),")"]}),"\n",(0,i.jsx)(s.li,{children:"The process becomes the process group leader of a new process group."}),"\n",(0,i.jsxs)(s.li,{children:["The process has no controlling terminal. ",(0,i.jsxs)(s.em,{children:["If the process had a controlling terminal before calling ",(0,i.jsx)(s.code,{children:"setsid"})," , that association is broken"]}),"."]}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"96-controlling-terminal",children:"9.6 Controlling Terminal"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["A session can have a single ",(0,i.jsx)(s.em,{children:"controlling terminal"}),"."]}),"\n",(0,i.jsxs)(s.li,{children:["The session leader that establishes the connection to the controlling terminal is called the ",(0,i.jsx)(s.em,{children:"calling process"}),"."]}),"\n",(0,i.jsxs)(s.li,{children:["The process groups within a session can be divided into a single ",(0,i.jsx)(s.em,{children:"foreground process group"})," and one ore more ",(0,i.jsx)(s.em,{children:"background process groups"}),"."]}),"\n",(0,i.jsx)(s.li,{children:"If a session has a controlling terminal, it has a single foreground process group and all other process groups in the session are background groups."}),"\n",(0,i.jsx)(s.li,{children:"Whenever we press the terminal's interrupt key, the interrupt signal is sent to all processes in the foreground process group."}),"\n",(0,i.jsx)(s.li,{children:"Whenever we press the terminal's quit key, the quit signal is sent to all processes in the foreground process group."}),"\n",(0,i.jsxs)(s.li,{children:["If a modern (or network) disconnect is detected by the terminal interface, the hang-up signal is sent to the ",(0,i.jsx)(s.strong,{children:(0,i.jsx)(s.em,{children:"controlling process"})}),"."]}),"\n"]}),"\n",(0,i.jsxs)("div",{style:{textAlign:"center"},children:[(0,i.jsx)(s.p,{children:(0,i.jsx)(s.img,{src:n(88983).A+"",width:"729",height:"426"})}),(0,i.jsx)(s.p,{children:(0,i.jsx)(s.em,{children:"Figure 9.7 Process groups and sessions showing controlling terminal"})})]}),"\n",(0,i.jsxs)(s.h2,{id:"97-tcgetpgrp-tcsetgrp-and-tcgetsid-functions",children:["9.7 ",(0,i.jsx)(s.code,{children:"tcgetpgrp"}),", ",(0,i.jsx)(s.code,{children:"tcsetgrp"}),", and ",(0,i.jsx)(s.code,{children:"tcgetsid"})," Functions"]}),"\n",(0,i.jsx)(s.p,{children:"Tell the kernel which process group is the foreground process group,"}),"\n",(0,i.jsxs)(s.p,{children:["if the process has a controlling terminal, the process can call ",(0,i.jsx)(s.code,{children:"tcsetpgrp"}),"\nto set the foreground process group ID to ",(0,i.jsx)(s.em,{children:"pgrpid"}),". The value of ",(0,i.jsx)(s.em,{children:"pgrpid"}),"\n",(0,i.jsx)(s.strong,{children:"must"})," be the process group ID of a process group in the ",(0,i.jsx)(s.strong,{children:"same"})," session,\nand ",(0,i.jsx)(s.em,{children:"fd"})," ",(0,i.jsx)(s.strong,{children:"must"})," refer to the controlling terminal of the session."]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-c",children:"\n#include <unistd.h>\n\n/*\n * return       process group ID of foreground process group if OK,\n *              -1 on error\n */\npid_t tcgetpgrp(int fd);\n\n/*\n * return       0 if OK, -1 on error\n */\nint tcsetpgrp(int fd, pid_t pgrpid);\n\n/*\n * return       session leader's process group ID if OK,\n *              -1 on error\n */\npid_t tcgetsid(int fd);\n\n"})}),"\n",(0,i.jsx)(s.h2,{id:"98-job-control",children:"9.8 Job Control"}),"\n",(0,i.jsx)(s.p,{children:"Job control allows us to start multiple jobs (groups of processes) from a single\nterminal and to control which jobs can access the terminal and which jobs are\nrun in the background."}),"\n",(0,i.jsx)(s.p,{children:"Requirements:"}),"\n",(0,i.jsxs)(s.ol,{children:["\n",(0,i.jsx)(s.li,{children:"shell supports"}),"\n",(0,i.jsx)(s.li,{children:"terminal driver in the kernel supports"}),"\n",(0,i.jsx)(s.li,{children:"kernel must supports certain job-control signals."}),"\n"]}),"\n",(0,i.jsxs)("div",{style:{textAlign:"center"},children:[(0,i.jsx)(s.p,{children:(0,i.jsx)(s.img,{src:n(67425).A+"",width:"705",height:"815"})}),(0,i.jsx)(s.p,{children:(0,i.jsx)(s.em,{children:"Figure Summary of job control features with foreground and background jobs, and terminal driver"})})]}),"\n",(0,i.jsx)(s.h2,{id:"910-orphaned-process-groups",children:"9.10 Orphaned Process Groups"}),"\n",(0,i.jsxs)(s.p,{children:["A process whose parent terminates is called an orphan and is inherited by the ",(0,i.jsx)(s.em,{children:"init"})," process."]}),"\n",(0,i.jsx)(s.h3,{id:"example",children:"Example"}),"\n",(0,i.jsxs)("div",{style:{textAlign:"center"},children:[(0,i.jsx)(s.p,{children:(0,i.jsx)(s.img,{src:n(32878).A+"",width:"305",height:"324"})}),(0,i.jsx)(s.p,{children:(0,i.jsx)(s.em,{children:"Figure 9.11 Example of a process about to be orphaned"})})]}),"\n",(0,i.jsx)(s.h2,{id:"911-freebsd-implementation",children:"9.11 FreeBSD Implementation"}),"\n",(0,i.jsxs)("div",{style:{textAlign:"center"},children:[(0,i.jsx)(s.p,{children:(0,i.jsx)(s.img,{src:n(42620).A+"",width:"729",height:"634"})}),(0,i.jsx)(s.p,{children:(0,i.jsx)(s.em,{children:"Figure 9.13 FreeBSD implementation of sessions and process groups"})})]}),"\n",(0,i.jsx)(s.p,{children:"session structure:"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"s_count is the number of process groups in the session."}),"\n",(0,i.jsx)(s.li,{children:"s_leader is a pointer to the proc structure of the session leader."}),"\n",(0,i.jsx)(s.li,{children:"s_ttyvp is a pointer to the vnode structure of the controlling terminal."}),"\n",(0,i.jsx)(s.li,{children:"s_ttyp is a pointer to the ttyp structure of the controlling terminal."}),"\n",(0,i.jsx)(s.li,{children:"s_sid is the session ID."}),"\n"]}),"\n",(0,i.jsx)(s.p,{children:"tty structure:"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"t_session points to the session structure that has this terminal as its controlling terminal."}),"\n",(0,i.jsx)(s.li,{children:"t_pgrp points to the pgrp structure of the foreground process group."}),"\n",(0,i.jsx)(s.li,{children:"t_termios is a structure containing all the special characters and related information for this kernel."}),"\n",(0,i.jsx)(s.li,{children:"t_winsize is a winsize structure that contains the current size of the terminal window."}),"\n"]}),"\n",(0,i.jsx)(s.p,{children:"process group:"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"pg_id is the process group ID."}),"\n",(0,i.jsx)(s.li,{children:"pg_session points to the session strcutre for the session to which this process group belongs."}),"\n",(0,i.jsx)(s.li,{children:"pg_members is a pointer to the list of proc structures that are members of this process group."}),"\n"]}),"\n",(0,i.jsx)(s.p,{children:"proc structure for single process:"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"p_pid contains the process ID."}),"\n",(0,i.jsx)(s.li,{children:"p_pptr is a pointer to the proc structure of the parent process."}),"\n",(0,i.jsx)(s.li,{children:"p_pgrp points to the pgrp structure of the process group to which this process belongs."}),"\n",(0,i.jsx)(s.li,{children:"p_pglist is a structure containing pointers to the next and previous processes in the process group."}),"\n"]})]})}function p(e={}){const{wrapper:s}={...(0,t.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},20698:(e,s,n)=>{n.d(s,{A:()=>r});const r=n.p+"assets/images/09fig06-152bfe4b715f8704e7284de0ba0832ed.jpg"},88983:(e,s,n)=>{n.d(s,{A:()=>r});const r=n.p+"assets/images/09fig07-ff38d0b3ae906d18f58f0c980062f792.jpg"},67425:(e,s,n)=>{n.d(s,{A:()=>r});const r=n.p+"assets/images/09fig09-346b55683aeaa1e4786b054ebba2505b.jpg"},32878:(e,s,n)=>{n.d(s,{A:()=>r});const r=n.p+"assets/images/09fig11-d699fedc34ef19a44322b8350f38ae46.jpg"},42620:(e,s,n)=>{n.d(s,{A:()=>r});const r=n.p+"assets/images/09fig13-3ad7a47dcb20c7debd1734b864997422.jpg"},28453:(e,s,n)=>{n.d(s,{R:()=>o,x:()=>c});var r=n(96540);const i={},t=r.createContext(i);function o(e){const s=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function c(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(t.Provider,{value:s},e.children)}}}]);