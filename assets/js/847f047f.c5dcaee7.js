"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9027],{31597:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>a,contentTitle:()=>c,default:()=>d,frontMatter:()=>i,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"TOC/computer/system/ostep/ch04","title":"4 The Abstraction: The Process","description":"- 4 The Abstraction: The Process","source":"@site/docs/TOC/computer/system/ostep/ch04.md","sourceDirName":"TOC/computer/system/ostep","slug":"/TOC/computer/system/ostep/ch04","permalink":"/docs/TOC/computer/system/ostep/ch04","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"2 Introduction to Operating Systems","permalink":"/docs/TOC/computer/system/ostep/ch02"},"next":{"title":"5 Interlude: Process API","permalink":"/docs/TOC/computer/system/ostep/ch05"}}');var n=t(74848),o=t(28453);const i={},c="4 The Abstraction: The Process",a={},l=[{value:"4.1 The Abstraction: The Process",id:"41-the-abstraction-the-process",level:2},{value:"4.2 Process API",id:"42-process-api",level:2},{value:"4.3 Process Creation: A Little More Detail",id:"43-process-creation-a-little-more-detail",level:2},{value:"4.4 Process States",id:"44-process-states",level:2},{value:"4.5 Data Structures",id:"45-data-structures",level:2},{value:"4.6 Summary",id:"46-summary",level:2}];function h(e){const s={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.header,{children:(0,n.jsx)(s.h1,{id:"4-the-abstraction-the-process",children:"4 The Abstraction: The Process"})}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.a,{href:"#4-the-abstraction-the-process",children:"4 The Abstraction: The Process"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsx)(s.li,{children:(0,n.jsx)(s.a,{href:"#41-the-abstraction-the-process",children:"4.1 The Abstraction: The Process"})}),"\n",(0,n.jsx)(s.li,{children:(0,n.jsx)(s.a,{href:"#42-process-api",children:"4.2 Process API"})}),"\n",(0,n.jsx)(s.li,{children:(0,n.jsx)(s.a,{href:"#43-process-creation-a-little-more-detail",children:"4.3 Process Creation: A Little More Detail"})}),"\n",(0,n.jsx)(s.li,{children:(0,n.jsx)(s.a,{href:"#44-process-states",children:"4.4 Process States"})}),"\n",(0,n.jsx)(s.li,{children:(0,n.jsx)(s.a,{href:"#45-data-structures",children:"4.5 Data Structures"})}),"\n",(0,n.jsx)(s.li,{children:(0,n.jsx)(s.a,{href:"#46-summary",children:"4.6 Summary"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(s.h2,{id:"41-the-abstraction-the-process",children:"4.1 The Abstraction: The Process"}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.strong,{children:"abstraction"}),": a running program."]}),"\n",(0,n.jsx)(s.p,{children:"special registers:"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:"program counter (PC)/instruction pointer (IP)"}),": tells us which instruction of the program will execute next;"]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:"stack pointer(SP)"}),": associated ",(0,n.jsx)(s.strong,{children:"frame pointer"})," are used to manage the stack for function parameters, local variables, and return address."]}),"\n"]}),"\n",(0,n.jsx)(s.h2,{id:"42-process-api",children:"4.2 Process API"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:"Create"}),": An operating system must include some method to create new processes."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:"Destroy"}),": destroy a process"]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:"Wait"}),": wait a process to stop running"]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:"Miscellaneous Control"}),": other than killing or waiting for a process, a process can be suspended or resume it"]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:"Status"}),": get status information about a process"]}),"\n"]}),"\n",(0,n.jsx)(s.h2,{id:"43-process-creation-a-little-more-detail",children:"4.3 Process Creation: A Little More Detail"}),"\n",(0,n.jsx)(s.h2,{id:"44-process-states",children:"4.4 Process States"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:"Running"}),": a process is on a processro"]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:"Ready"}),": a process is ready to run but for some reason the OS has chosen not to run it as a given moment"]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:"Blocked"}),": a process has performed some kind of operation that makes it not ready to run until some other event take place. (e.g., keybord input)"]}),"\n"]}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.img,{alt:"image-20230130173742069",src:t(61396).A+"",width:"376",height:"241"})}),"\n",(0,n.jsx)(s.h2,{id:"45-data-structures",children:"4.5 Data Structures"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-c",children:"// the registers xv6 will save and restore\n// to stop and subsequently restart a process\nstruct context {\n    int eip;\n    int esp;\n    int ebx;\n    int ecx;\n    int edx;\n    int esi;\n    int edi;\n    int ebp;\n};\n\n\n// the different states a process can be in\nenum proc_state { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };\n\n// the information xv6 tracks about each process\n// including its register context and state\nstruct proc {\n    char * mem;                                  // Start of process memory\n    uint sz;                                     // Size of process memory\n    char * kstack;                               // Bottom of kernel stack for this process\n    enum proc_state state;                       // Process state\n    int pid;                                     // Process ID\n    struct proc * parent;                        // Parent process\n    void * chan;                                 // If !zero, sleeping on chan\n    int killed;                                  // If !zero, has been killed\n    struct file * ofile[NOFILE];                 // Open files\n    struct inode * cwd;                          // Current directory\n    struct context context;                      // Switch here to run process\n    struct trapframe * tf;                       // Trap frame for the\n};\n"})}),"\n",(0,n.jsx)(s.h2,{id:"46-summary",children:"4.6 Summary"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:"process"})," is the major OS abstraction of a running program."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:"process API"}),": creation, destruction, and so on."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:"process states"}),": running, ready to run, and blocked."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:"process list"})," contains information about all processes in the system. Each entry called ",(0,n.jsx)(s.strong,{children:"process control block (PCB)"}),"."]}),"\n"]})]})}function d(e={}){const{wrapper:s}={...(0,o.R)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(h,{...e})}):h(e)}},61396:(e,s,t)=>{t.d(s,{A:()=>r});const r=t.p+"assets/images/image-20230130173742069-c84ca298f0ae503a857be4803c09b686.png"},28453:(e,s,t)=>{t.d(s,{R:()=>i,x:()=>c});var r=t(96540);const n={},o=r.createContext(n);function i(e){const s=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function c(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:i(e.components),r.createElement(o.Provider,{value:s},e.children)}}}]);