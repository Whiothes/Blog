"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7129],{86021:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>d});const l=JSON.parse('{"id":"TOC/computer/system/tlpi/tlpi","title":"Chapter 63: Alternative I/O Models","description":"- I/O multiplexing (select() / poll())","source":"@site/docs/TOC/computer/system/tlpi/tlpi.md","sourceDirName":"TOC/computer/system/tlpi","slug":"/TOC/computer/system/tlpi/","permalink":"/docs/TOC/computer/system/tlpi/","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"The Linux Programming Interface","permalink":"/docs/category/the-linux-programming-interface"},"next":{"title":"Networking","permalink":"/docs/category/networking"}}');var s=i(74848),t=i(28453);const r={},a="Chapter 63: Alternative I/O Models",c={},d=[{value:"63.1 Overview",id:"631-overview",level:2},{value:"63.1.1 Level-Triggered and Edge-Triggered Notifications",id:"6311-level-triggered-and-edge-triggered-notifications",level:3},{value:"63.1.2 Employing Nonblocking I/O with Alternative I/O models",id:"6312-employing-nonblocking-io-with-alternative-io-models",level:3},{value:"63.2 I/O Multiplexing",id:"632-io-multiplexing",level:2},{value:"63.2.4 comparison of <code>select()</code> and <code>poll()</code>",id:"6324-comparison-of-select-and-poll",level:3},{value:"Portability",id:"portability",level:4},{value:"Performance",id:"performance",level:4},{value:"63.2.5 Problems with <code>select()</code> and <code>poll()</code>",id:"6325-problems-with-select-and-poll",level:3},{value:"63.3 Signal-Driven I/O",id:"633-signal-driven-io",level:2},{value:"63.3.1 When Is &quot;I/O Possible&quot; Signaled?",id:"6331-when-is-io-possible-signaled",level:3},{value:"Terminals and pseudoterminals",id:"terminals-and-pseudoterminals",level:4},{value:"63.4 The <em>epoll</em> API",id:"634-the-epoll-api",level:2},{value:"63.4.1 Creating an <em>epoll</em> instance: <code>epoll_create()</code>",id:"6341-creating-an-epoll-instance-epoll_create",level:3},{value:"63.4.2 Modifying the <em>epoll</em> Interest List: <code>epoll_ctrl()</code>",id:"6342-modifying-the-epoll-interest-list-epoll_ctrl",level:3},{value:"63.4.3 Waiting for Events: <code>epoll_wait()</code>",id:"6343-waiting-for-events-epoll_wait",level:3}];function o(e){const n={annotation:"annotation",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",math:"math",mo:"mo",mrow:"mrow",ol:"ol",p:"p",pre:"pre",semantics:"semantics",span:"span",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"chapter-63-alternative-io-models",children:"Chapter 63: Alternative I/O Models"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["I/O multiplexing (",(0,s.jsx)(n.code,{children:"select()"})," / ",(0,s.jsx)(n.code,{children:"poll()"}),")"]}),"\n",(0,s.jsx)(n.li,{children:"signal-driven I/O"}),"\n",(0,s.jsxs)(n.li,{children:["the Linux-specific ",(0,s.jsx)(n.em,{children:"epoll"})," API"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"631-overview",children:"63.1 Overview"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["I/O multiplexing allows a process to simultaneously monitor multiple file descriptors to find out whether I/O is possible on any of them. (",(0,s.jsx)(n.code,{children:"select"}),"/",(0,s.jsx)(n.code,{children:"poll"}),")"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Signal-driven is a technique whereby a process requests that the kernel send it a signal when input is available or data can be written on a specified file descriptor."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.em,{children:"epoll"})," API allows a process to monitor multiple file descriptors to see if I/O is possible on any of them."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Which technique ?"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["select and poll :","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["advantage: ",(0,s.jsx)(n.em,{children:"portability"})]}),"\n",(0,s.jsx)(n.li,{children:"disadvantage: don't scale well when monitoring large numbers of file descriptors."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["epoll:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"primary advantage: allows an application to efficiently monitor large numbers of file descriptors."}),"\n",(0,s.jsxs)(n.li,{children:["advantages over signal-driven I/O:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"avoid complexities of dealing with signals"}),"\n",(0,s.jsx)(n.li,{children:"can specify the kind of monitoring that we want to perform (r/w)"}),"\n",(0,s.jsx)(n.li,{children:"can select either level-triggered or edge-triggered notification"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:"disadvantage: Linux-specific API (OSX: kqueue)"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:"signal-driven I/O"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"6311-level-triggered-and-edge-triggered-notifications",children:"63.1.1 Level-Triggered and Edge-Triggered Notifications"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Level-triggered notification: A file descriptor is considered to be ready if it is possible to perform an I/O system call without blocking."}),"\n",(0,s.jsx)(n.li,{children:"Edge-triggered notification: Notification is provided if there is I/O activity (e.g. new input) on a file descriptor since it was last monitored ."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Use of level-triggered and edge-triggered notification models"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{style:{textAlign:"center"},children:"I/O model"}),(0,s.jsx)(n.th,{style:{textAlign:"center"},children:"Level-triggered ?"}),(0,s.jsx)(n.th,{style:{textAlign:"center"},children:"Edge-triggered"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsxs)(n.td,{style:{textAlign:"center"},children:[(0,s.jsx)(n.code,{children:"select()"}),", ",(0,s.jsx)(n.code,{children:"poll()"})]}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsxs)(n.span,{className:"katex",children:[(0,s.jsx)(n.span,{className:"katex-mathml",children:(0,s.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,s.jsxs)(n.semantics,{children:[(0,s.jsx)(n.mrow,{children:(0,s.jsx)(n.mo,{children:"\u2219"})}),(0,s.jsx)(n.annotation,{encoding:"application/x-tex",children:"\\bullet"})]})})}),(0,s.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,s.jsxs)(n.span,{className:"base",children:[(0,s.jsx)(n.span,{className:"strut",style:{height:"0.4445em"}}),(0,s.jsx)(n.span,{className:"mord",children:"\u2219"})]})})]})}),(0,s.jsx)(n.td,{style:{textAlign:"center"}})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"Signal-driven I/O"}),(0,s.jsx)(n.td,{style:{textAlign:"center"}}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsxs)(n.span,{className:"katex",children:[(0,s.jsx)(n.span,{className:"katex-mathml",children:(0,s.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,s.jsxs)(n.semantics,{children:[(0,s.jsx)(n.mrow,{children:(0,s.jsx)(n.mo,{children:"\u2219"})}),(0,s.jsx)(n.annotation,{encoding:"application/x-tex",children:"\\bullet"})]})})}),(0,s.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,s.jsxs)(n.span,{className:"base",children:[(0,s.jsx)(n.span,{className:"strut",style:{height:"0.4445em"}}),(0,s.jsx)(n.span,{className:"mord",children:"\u2219"})]})})]})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"epoll"}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsxs)(n.span,{className:"katex",children:[(0,s.jsx)(n.span,{className:"katex-mathml",children:(0,s.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,s.jsxs)(n.semantics,{children:[(0,s.jsx)(n.mrow,{children:(0,s.jsx)(n.mo,{children:"\u2219"})}),(0,s.jsx)(n.annotation,{encoding:"application/x-tex",children:"\\bullet"})]})})}),(0,s.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,s.jsxs)(n.span,{className:"base",children:[(0,s.jsx)(n.span,{className:"strut",style:{height:"0.4445em"}}),(0,s.jsx)(n.span,{className:"mord",children:"\u2219"})]})})]})}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsxs)(n.span,{className:"katex",children:[(0,s.jsx)(n.span,{className:"katex-mathml",children:(0,s.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,s.jsxs)(n.semantics,{children:[(0,s.jsx)(n.mrow,{children:(0,s.jsx)(n.mo,{children:"\u2219"})}),(0,s.jsx)(n.annotation,{encoding:"application/x-tex",children:"\\bullet"})]})})}),(0,s.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,s.jsxs)(n.span,{className:"base",children:[(0,s.jsx)(n.span,{className:"strut",style:{height:"0.4445em"}}),(0,s.jsx)(n.span,{className:"mord",children:"\u2219"})]})})]})})]})]})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"level-triggered: check readiness of a file descriptor at any time. not necessary to perform as much I/O as possible. (e.g., read as many bytes as possible)."}),"\n",(0,s.jsx)(n.li,{children:"edge-triggered: only when an I/O event occurs."}),"\n",(0,s.jsx)(n.li,{children:"should-at some point (but may starve other fd when perform a large number of I/O on one fd) -perform as much I/O as possible (e.g., read as many bytes as possible) on the corresponding file descriptor."}),"\n",(0,s.jsx)(n.li,{children:"would not be aware of the need to operate on the fd until another I/O event occured."}),"\n",(0,s.jsx)(n.li,{children:"could lead to spurious data loss or blockages"}),"\n",(0,s.jsx)(n.li,{children:"will block I/O system call when no more I/O if it's a loop to perform as much I/O as possible on the fd and marked as blocking"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"6312-employing-nonblocking-io-with-alternative-io-models",children:"63.1.2 Employing Nonblocking I/O with Alternative I/O models"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"nonblocking I/O is usually employed in conjunction with I/O models that provide edge- triggered notification of I/O events"}),"\n",(0,s.jsx)(n.li,{children:"while multiple process (or threads) are performing I/O on the same open fd, a fd's readiness may change between the time the fd was notified as being ready and the time of the subsequent I/O call."}),"\n",(0,s.jsxs)(n.li,{children:["large block data writing may nevertheless block even after a level-triggered APIs such as ",(0,s.jsx)(n.code,{children:"select()"})," or ",(0,s.jsx)(n.code,{children:"poll()"})," informs ready for writing."]}),"\n",(0,s.jsx)(n.li,{children:"level-triggered APIs can return spurious readiness notifications -- falsely inform ready. could be caused by a kernel bug or be expected behavior in an uncommon scenario."}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"632-io-multiplexing",children:"63.2 I/O Multiplexing"}),"\n",(0,s.jsxs)(n.h3,{id:"6324-comparison-of-select-and-poll",children:["63.2.4 comparison of ",(0,s.jsx)(n.code,{children:"select()"})," and ",(0,s.jsx)(n.code,{children:"poll()"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.em,{children:"fd_set"})," for ",(0,s.jsx)(n.code,{children:"select"})," has a limit on the range of file descriptors, by default, it is 1024."]}),"\n",(0,s.jsxs)(n.li,{children:["we must reinitialize fd_set arguments while using ",(0,s.jsx)(n.code,{children:"select()"})," because they are value-result."]}),"\n",(0,s.jsxs)(n.li,{children:["the ",(0,s.jsx)(n.em,{children:"timeout"})," precision is different between ",(0,s.jsx)(n.code,{children:"select()"})," and ",(0,s.jsx)(n.code,{children:"poll()"})]}),"\n",(0,s.jsxs)(n.li,{children:["if one of the file descriptors being monitored was closed, ",(0,s.jsx)(n.code,{children:"poll()"})," informs exactly which one, but ",(0,s.jsx)(n.code,{children:"select()"})," not."]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"portability",children:"Portability"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"select"})," was more widely available than ",(0,s.jsx)(n.code,{children:"poll"})]}),"\n",(0,s.jsx)(n.h4,{id:"performance",children:"Performance"}),"\n",(0,s.jsx)(n.p,{children:"The performance is similar is either is true:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"file descriptors to be monitored is small."}),"\n",(0,s.jsx)(n.li,{children:"a large number of file descriptors are being monitored, but they are densely packed."}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"poll"})," can perform better than ",(0,s.jsx)(n.code,{children:"select"})," if the set of file descriptors to be monitored is sparse"]}),"\n",(0,s.jsxs)(n.h3,{id:"6325-problems-with-select-and-poll",children:["63.2.5 Problems with ",(0,s.jsx)(n.code,{children:"select()"})," and ",(0,s.jsx)(n.code,{children:"poll()"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"On each call of them, the kernel must check all of the specified file descriptors to see if they are ready."}),"\n",(0,s.jsx)(n.li,{children:"In each call of them, the program must pass a data structure to the kernel describing all the file descriptors to be monitored, and then the kernel returns a modified version."}),"\n",(0,s.jsx)(n.li,{children:"After the call of them, the program must inspect every element of the retured data structure to see which file descriptors are ready."}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"633-signal-driven-io",children:"63.3 Signal-Driven I/O"}),"\n",(0,s.jsx)(n.p,{children:"steps:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Establish a handler for the signal delivered by the signal-driven I/O mechanism. By default, SIGIO."}),"\n",(0,s.jsx)(n.li,{children:"set /owner/ of the file descriptor."}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:"fcntl(fd, F_SETOWN, pid);\n"})}),"\n",(0,s.jsxs)(n.ol,{start:"3",children:["\n",(0,s.jsxs)(n.li,{children:["Enable nonblocking I/O by setting the ",(0,s.jsx)(n.em,{children:"O_NONBLOCK"})," open file status flag."]}),"\n",(0,s.jsxs)(n.li,{children:["Enable signal-driven I/O by turning on the ",(0,s.jsx)(n.em,{children:"O_ASYNC"})," open file status flag."]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:"flags = fcntl(fd, F_GETFL);\nfcntl(fd, F_SETFL, flags | O_ASYNC | O_NONBLOCK);\n"})}),"\n",(0,s.jsxs)(n.ol,{start:"5",children:["\n",(0,s.jsx)(n.li,{children:"When I/O becomes possible, the kernel generates a signal for the process and invokes the signal handler established in step 1."}),"\n",(0,s.jsx)(n.li,{children:"edge-triggered notification."}),"\n"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:'Example program\n+include: "Chapter63/demo_sigio.c" src c'}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"6331-when-is-io-possible-signaled",children:'63.3.1 When Is "I/O Possible" Signaled?'}),"\n",(0,s.jsx)(n.h4,{id:"terminals-and-pseudoterminals",children:"Terminals and pseudoterminals"}),"\n",(0,s.jsxs)(n.h2,{id:"634-the-epoll-api",children:["63.4 The ",(0,s.jsx)(n.em,{children:"epoll"})," API"]}),"\n",(0,s.jsx)(n.p,{children:"primary advantages:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["much better than ",(0,s.jsx)(n.code,{children:"select"})," and ",(0,s.jsx)(n.code,{children:"poll"})," when monitoring large numbers of file descriptors"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.em,{children:"epoll"})," permits either level-triggered or edge-triggered notification."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"epoll"})," has some advantages over signal-driven I/O:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"avoid complexities of signal handling."}),"\n",(0,s.jsx)(n.li,{children:"greater flexibility in specifying what kind of monitoring we want to perform."}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"The _epoll"})," API is Linux-specific (kqueue on MacOS), and is new in Linux 2.6_"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"epoll instance"}),", the central data structure, is a handle for kernel data structures that serve two purposes:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["recording a list of file descriptors that this process has declared an interest in monitoring - the ",(0,s.jsx)(n.em,{children:"interest list"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["maintaining a list of file descriptors that are ready for I/O - the ",(0,s.jsx)(n.em,{children:"ready list"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["The membership of the ready list is a ",(0,s.jsx)(n.em,{children:"subset"})," of the interest list."]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.em,{children:"epoll"})," API consists of three system calls."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"epoll_create()"})," system call creates an ",(0,s.jsx)(n.em,{children:"epoll"})," instance and returns a file descriptor referring to the instance."]}),"\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"epoll_ctl()"})," system call manipulates the interest list associated with an ",(0,s.jsx)(n.em,{children:"epoll"})," instance."]}),"\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"epoll_wait()"})," system call returns items from the ready list associated with an ",(0,s.jsx)(n.em,{children:"epoll"})," instance."]}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"6341-creating-an-epoll-instance-epoll_create",children:["63.4.1 Creating an ",(0,s.jsx)(n.em,{children:"epoll"})," instance: ",(0,s.jsx)(n.code,{children:"epoll_create()"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:"include <sys/epoll.h>\n\n/**\n * @brief      create a new epoll instance\n *\n * @param      size     specifies the number of file descriptors that we expect to monitor\n *\n * @return     file descriptor on success, or -1 on error\n */\nint epoll_create(int size);\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"6342-modifying-the-epoll-interest-list-epoll_ctrl",children:["63.4.2 Modifying the ",(0,s.jsx)(n.em,{children:"epoll"})," Interest List: ",(0,s.jsx)(n.code,{children:"epoll_ctrl()"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:"include <sys/epoll.h>\n\n/**\n * @brief      modifies the interest list of the _epoll_ instance\n *\n * @details    detailed description\n *\n * @param      epfd     refered by\n * @param      op       EPOLL_CTRL_ADD, EPOLL_CTL_MOD, EPOLL_CTL_DEL\n * @param      ev       man epoll_ctl for details\n *\n * @return     0 on success, -1 on error\n */\nint epoll_ctl(int epfd, int op, int fd, struct epoll_event *ev);\n"})}),"\n",(0,s.jsxs)(n.p,{children:["+caption: Using ",(0,s.jsx)(n.code,{children:"epoll_create()"})," and ",(0,s.jsx)(n.code,{children:"epoll_ctl()"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:'int epfd;\nstruct epoll_event ev;\n\nepfd = epoll_create(5);\nif (epfd `` -1) {\n        err_sys("epoll_create");\n}\n\nev.data.fd = fd;\nev.events = EPOLLIN;\nif (epoll_ctl(epfd, EPOLL_CTL_ADD, fd, ev) `` -1) {\n        err_sys("epoll_ctl");\n}\n'})}),"\n",(0,s.jsxs)(n.h3,{id:"6343-waiting-for-events-epoll_wait",children:["63.4.3 Waiting for Events: ",(0,s.jsx)(n.code,{children:"epoll_wait()"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:"include <sys/epoll.h>\n\n/**\n  * @brief      returns info about ready file descriptors\n  *\n  * @details    from the epoll instance refered to by the file descriptor epfd.\n  *\n  * @return     number of ready fd if OK, 0 on timeout, -1 on error.\n  */\nint epoll_wait(int epfd, struct epoll_event *evlist, int maxevents, int timeout);\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"EPOLLONESHOT"})," flag\nFor specify to be notified only once about a particular file descriptor. Reenable by using the ",(0,s.jsx)(n.code,{children:"epoll_ctl()"})," ",(0,s.jsx)(n.code,{children:"EPOLL_CTL_MOD"})," operation."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:'Example program\n+caption: Listing 63-5: Using the epoll API\n+include: "Chapter63/epoll_input.c" src c'}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>a});var l=i(96540);const s={},t=l.createContext(s);function r(e){const n=l.useContext(t);return l.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),l.createElement(t.Provider,{value:n},e.children)}}}]);