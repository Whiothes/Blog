"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[215],{41406:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>d,default:()=>u,frontMatter:()=>a,metadata:()=>t,toc:()=>o});var t=i(66441),r=i(74848),s=i(28453);const a={Title:"expand partition mounted /",Tags:["systemctl","partition"]},d=void 0,l={authorsImageUrls:[]},o=[{value:"Manually expand partition scripts",id:"manually-expand-partition-scripts",level:2},{value:"find partition for /",id:"find-partition-for-",level:3},{value:"split disk and partition number",id:"split-disk-and-partition-number",level:3},{value:"resize2fs",id:"resize2fs",level:3},{value:"Automatically expand partiton mounted <code>/</code>",id:"automatically-expand-partiton-mounted-",level:2},{value:"1. write go code",id:"1-write-go-code",level:3},{value:"2. build",id:"2-build",level:3},{value:"3. write system service <code>expand_disk.service</code>",id:"3-write-system-service-expand_diskservice",level:3},{value:"4. enable service",id:"4-enable-service",level:3}];function c(e){const n={code:"code",h2:"h2",h3:"h3",li:"li",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"manually-expand-partition-scripts",children:"Manually expand partition scripts"}),"\n",(0,r.jsx)(n.h3,{id:"find-partition-for-",children:"find partition for /"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"findmnt -nosource /\n\n/dev/sda3\n"})}),"\n",(0,r.jsx)(n.h3,{id:"split-disk-and-partition-number",children:"split disk and partition number"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"growpart /dev/sda 3\n"})}),"\n",(0,r.jsx)(n.h3,{id:"resize2fs",children:"resize2fs"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"resize2fs /dev/sda3\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"automatically-expand-partiton-mounted-",children:["Automatically expand partiton mounted ",(0,r.jsx)(n.code,{children:"/"})]}),"\n",(0,r.jsx)(n.h3,{id:"1-write-go-code",children:"1. write go code"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n "os"\n "os/exec"\n "strings"\n)\n\nfunc main() {\n if os.Geteuid() != 0 {\n  // fmt.Println("This script must be run as root")\n  os.Exit(1)\n }\n\n // Identify the device that / is mounted on\n out, err := exec.Command("df", "/").Output()\n if err != nil {\n  // fmt.Println("Error running df command:", err)\n  os.Exit(1)\n }\n\n // Parse the output to get the device\n lines := strings.Split(string(out), "\\n")\n if len(lines) < 2 {\n  // fmt.Println("Unexpected output from df command")\n  os.Exit(1)\n }\n\n fields := strings.Fields(lines[1])\n if len(fields) < 1 {\n  // fmt.Println("Unexpected output from df command")\n  os.Exit(1)\n }\n\n device := fields[0]\n // fmt.Println("Device:", device)\n\n // Extract the base device and partition number\n var baseDevice, partNum string\n if strings.HasPrefix(device, "/dev/mapper/") {\n  baseDevice = strings.TrimSuffix(device, "1")\n  partNum = "1"\n } else {\n  baseDevice = strings.TrimRightFunc(device, func(r rune) bool {\n   return r >= \'0\' && r <= \'9\'\n  })\n  partNum = strings.TrimPrefix(device, baseDevice)\n\n }\n\n // Grow the partition\n if err := exec.Command("growpart", baseDevice, partNum).Run(); err != nil {\n  // fmt.Println("Error running growpart command:", err)\n  os.Exit(1)\n }\n\n // Resize the filesystem\n if err := exec.Command("resize2fs", device).Run(); err != nil {\n  // fmt.Println("Error running resize2fs command:", err)\n  os.Exit(1)\n }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"2-build",children:"2. build"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"go mod init expand_disk\ngo mod tidy\n\nGOOS=linux GOARCH=amd64 go build .\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"3-write-system-service-expand_diskservice",children:["3. write system service ",(0,r.jsx)(n.code,{children:"expand_disk.service"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-conf",children:"[Unit]\nDescription=Expand disk partition mounted on /\nAfter=initrd-usr-fs.target\n\n[Service]\nExecStart=/usr/local/bin/expand_disk\n\n[Install]\nWantedBy=multi-user.target\n"})}),"\n",(0,r.jsx)(n.h3,{id:"4-enable-service",children:"4. enable service"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Install to system"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"sudo cp expand_disk.service /usr/lib/system/systemd/\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Enable system"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"sudo systemctl enable expand_disk\n"})})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>d});var t=i(96540);const r={},s=t.createContext(r);function a(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(s.Provider,{value:n},e.children)}},66441:e=>{e.exports=JSON.parse('{"permalink":"/blog/2024/05/21/auto-expand-partition","source":"@site/blog/2024/05-21-auto-expand-partition.md","title":"auto-expand-partition","description":"Manually expand partition scripts","date":"2024-05-21T00:00:00.000Z","tags":[],"readingTime":1.49,"hasTruncateMarker":true,"authors":[],"frontMatter":{"Title":"expand partition mounted /","Tags":["systemctl","partition"]},"unlisted":false,"prevItem":{"title":"\u5728\u786c\u76d8\u4e0a\u8fd0\u884c\u865a\u62df\u673a\u7cfb\u7edf","permalink":"/blog/2024/06/07/vmdk2img"},"nextItem":{"title":"HOWTO-configure-network-on-ubuntu","permalink":"/blog/2024/05/20/HOWTO-configure-network-on-ubuntu"}}')}}]);