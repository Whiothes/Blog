"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5359],{17391:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>d,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"TOC/computer/kernel/lkd/ch04","title":"\u7b2c 4 \u7ae0 \u8fdb\u7a0b\u8c03\u5ea6","description":"4.1 \u591a\u4efb\u52a1 ##","source":"@site/docs/TOC/computer/kernel/lkd/ch04.md","sourceDirName":"TOC/computer/kernel/lkd","slug":"/TOC/computer/kernel/lkd/ch04","permalink":"/docs/TOC/computer/kernel/lkd/ch04","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"\u7b2c 3 \u7ae0 \u8fdb\u7a0b\u7ba1\u7406","permalink":"/docs/TOC/computer/kernel/lkd/ch03"},"next":{"title":"\u7b2c 5 \u7ae0 \u7cfb\u7edf\u8c03\u7528","permalink":"/docs/TOC/computer/kernel/lkd/ch05"}}');var r=t(74848),c=t(28453);const i={},d="\u7b2c 4 \u7ae0 \u8fdb\u7a0b\u8c03\u5ea6",l={},a=[{value:"4.1 \u591a\u4efb\u52a1",id:"41-\u591a\u4efb\u52a1",level:2},{value:"4.2 Linux \u7684\u8fdb\u7a0b\u8c03\u5ea6",id:"42-linux-\u7684\u8fdb\u7a0b\u8c03\u5ea6",level:2},{value:"4.3 \u7b56\u7565",id:"43-\u7b56\u7565",level:2},{value:"4.3.1 I/O \u6d88\u8017\u578b\u548c\u5904\u7406\u5668\u6d88\u8017\u578b\u7684\u8fdb\u7a0b",id:"431-io-\u6d88\u8017\u578b\u548c\u5904\u7406\u5668\u6d88\u8017\u578b\u7684\u8fdb\u7a0b",level:3},{value:"4.3.2 \u8fdb\u7a0b\u4f18\u5148\u7ea7",id:"432-\u8fdb\u7a0b\u4f18\u5148\u7ea7",level:3},{value:"4.3.3 \u65f6\u95f4\u7247",id:"433-\u65f6\u95f4\u7247",level:3},{value:"4.5 Linux \u8c03\u5ea6\u7684\u5b9e\u73b0",id:"45-linux-\u8c03\u5ea6\u7684\u5b9e\u73b0",level:2},{value:"4.5.1 \u65f6\u95f4\u8bb0\u8d26",id:"451-\u65f6\u95f4\u8bb0\u8d26",level:3},{value:"4.5.2 \u8fdb\u7a0b\u9009\u62e9",id:"452-\u8fdb\u7a0b\u9009\u62e9",level:3},{value:"4.5.3 \u8c03\u5ea6\u5668\u5165\u53e3",id:"453-\u8c03\u5ea6\u5668\u5165\u53e3",level:3},{value:"4.5.4 \u7761\u7720\u548c\u5524\u9192",id:"454-\u7761\u7720\u548c\u5524\u9192",level:3},{value:"4.6 \u62a2\u5360\u548c\u4e0a\u4e0b\u6587\u5207\u6362",id:"46-\u62a2\u5360\u548c\u4e0a\u4e0b\u6587\u5207\u6362",level:2},{value:"4.6.1 \u7528\u6237\u62a2\u5360",id:"461-\u7528\u6237\u62a2\u5360",level:3},{value:"4.6.2 \u5185\u6838\u62a2\u5360",id:"462-\u5185\u6838\u62a2\u5360",level:3},{value:"4.7 \u5b9e\u65f6\u8c03\u5ea6\u7b56\u7565",id:"47-\u5b9e\u65f6\u8c03\u5ea6\u7b56\u7565",level:2},{value:"4.8 \u4e0e\u8c03\u5ea6\u76f8\u5173\u7684\u7cfb\u7edf\u8c03\u7528",id:"48-\u4e0e\u8c03\u5ea6\u76f8\u5173\u7684\u7cfb\u7edf\u8c03\u7528",level:2},{value:"4.8.1 \u4e0e\u8c03\u5ea6\u7b56\u7565\u548c\u4f18\u5148\u7ea7\u76f8\u5173\u7684\u7cfb\u7edf\u8c03\u7528",id:"481-\u4e0e\u8c03\u5ea6\u7b56\u7565\u548c\u4f18\u5148\u7ea7\u76f8\u5173\u7684\u7cfb\u7edf\u8c03\u7528",level:3},{value:"4.8.2 \u4e0e\u5904\u7406\u5668\u7ed1\u5b9a\u6709\u5173\u7684\u7cfb\u7edf\u8c03\u7528",id:"482-\u4e0e\u5904\u7406\u5668\u7ed1\u5b9a\u6709\u5173\u7684\u7cfb\u7edf\u8c03\u7528",level:3},{value:"4.8.3 \u653e\u5f03\u5904\u7406\u5668\u65f6\u95f4",id:"483-\u653e\u5f03\u5904\u7406\u5668\u65f6\u95f4",level:3}];function _(e){const n={annotation:"annotation",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",math:"math",mn:"mn",mo:"mo",mrow:"mrow",ol:"ol",p:"p",pre:"pre",semantics:"semantics",span:"span",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,c.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"\u7b2c-4-\u7ae0-\u8fdb\u7a0b\u8c03\u5ea6",children:"\u7b2c 4 \u7ae0 \u8fdb\u7a0b\u8c03\u5ea6"})}),"\n",(0,r.jsx)(n.h2,{id:"41-\u591a\u4efb\u52a1",children:"4.1 \u591a\u4efb\u52a1"}),"\n",(0,r.jsx)(n.p,{children:"\u591a\u4efb\u52a1\u64cd\u4f5c\u7cfb\u7edf\u5c31\u662f\u80fd\u540c\u65f6\u5e76\u53d1\u5730\u4ea4\u4e92\u6267\u884c\u591a\u4e2a\u8fdb\u7a0b\u7684\u64cd\u4f5c\u7cfb\u7edf\u3002"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"\u975e\u62a2\u5360\u5f0f\u591a\u4efb\u52a1\uff08cooperative multitasking\uff09\uff1a\u9664\u975e\u8fdb\u7a0b\u81ea\u5df1\u4e3b\u52a8\u505c\u6b62\u8fd0\u884c\uff0c\u5426\u5219\u5b83\u4f1a\u4e00\u76f4\u6267\u884c\u3002"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"\u8ba9\u6b65\uff1a\u8fdb\u7a0b\u4e3b\u52a8\u6302\u8d77\u81ea\u5df1\u7684\u64cd\u4f5c\u3002"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"\u62a2\u5360\u5f0f\u591a\u4efb\u52a1\uff08preemptive multitasking\uff09\uff1a\u8c03\u5ea6\u7a0b\u5e8f\u505c\u6b62\u4e00\u4e2a\u8fdb\u7a0b\u7684\u8fd0\u884c\uff0c\u4ee5\u4fbf\u5176\u4ed6\u8fdb\u7a0b\u80fd\u591f\u5f97\u5230\u6267\u884c\u673a\u4f1a\u3002"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"\u65f6\u95f4\u7247\uff1a\u5206\u914d\u7ed9\u6bcf\u4e2a\u53ef\u8fd0\u884c\u8fdb\u7a0b\u7684\u5904\u7406\u5668\u65f6\u95f4\u6bb5"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Unix \u4ece\u4e00\u5f00\u59cb\u5c31\u662f\u62a2\u5360\u5f0f\u7684\u591a\u4efb\u52a1\u3002"}),"\n",(0,r.jsx)(n.h2,{id:"42-linux-\u7684\u8fdb\u7a0b\u8c03\u5ea6",children:"4.2 Linux \u7684\u8fdb\u7a0b\u8c03\u5ea6"}),"\n",(0,r.jsx)(n.p,{children:"\u201c\u5168\u516c\u5e73\u8c03\u5ea6\u7b97\u6cd5\u201d\uff08CFS\uff09"}),"\n",(0,r.jsx)(n.h2,{id:"43-\u7b56\u7565",children:"4.3 \u7b56\u7565"}),"\n",(0,r.jsx)(n.p,{children:"\u7b56\u7565\u51b3\u5b9a\u7a0b\u5e8f \u5728\u4f55\u65f6\u8ba9\u4ec0\u4e48\u8fdb\u7a0b\u8fd0\u884c\u3002"}),"\n",(0,r.jsx)(n.h3,{id:"431-io-\u6d88\u8017\u578b\u548c\u5904\u7406\u5668\u6d88\u8017\u578b\u7684\u8fdb\u7a0b",children:"4.3.1 I/O \u6d88\u8017\u578b\u548c\u5904\u7406\u5668\u6d88\u8017\u578b\u7684\u8fdb\u7a0b"}),"\n",(0,r.jsx)(n.p,{children:"I/O \u6d88\u8017\u578b\u6307\u8fdb\u7a0b\u7684\u5927\u90e8\u5206\u65f6\u95f4\u7528\u6765\u63d0\u4ea4 I/O \u8bf7\u6c42\u6216\u7b49\u5f85 I/O \u8bf7\u6c42\u3002\u7ecf\u5e38\u5904\u4e8e\u53ef\u8fd0\u884c\u72b6\u6001\uff0c\u4f46\u901a\u5e38\u53ea\u8fd0\u884c\u4e00\u4f1a\u513f\u4fbf\u5728\u7b49\u5f85\u66f4\u591a\u7684I/O\u8bf7\u6c42\u65f6\u963b\u585e\u3002"}),"\n",(0,r.jsx)(n.p,{children:"\u5904\u7406\u5668\u8017\u8d39\u578b\u8fdb\u7a0b\u628a\u65f6\u95f4\u5927\u591a\u7528\u5728\u6267\u884c\u4ee3\u7801\u4e0a\u3002\u9664\u975e\u88ab\u62a2\u5360\u5426\u5219 \u90fd\u4e00\u76f4\u4e0d\u505c\u5730\u8fd0\u884c\u3002"}),"\n",(0,r.jsx)(n.h3,{id:"432-\u8fdb\u7a0b\u4f18\u5148\u7ea7",children:"4.3.2 \u8fdb\u7a0b\u4f18\u5148\u7ea7"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"nice"}),"\uff1a \u8303\u56f4\u662f",(0,r.jsxs)(n.span,{className:"katex",children:[(0,r.jsx)(n.span,{className:"katex-mathml",children:(0,r.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,r.jsxs)(n.semantics,{children:[(0,r.jsxs)(n.mrow,{children:[(0,r.jsx)(n.mo,{stretchy:"false",children:"["}),(0,r.jsx)(n.mo,{children:"\u2212"}),(0,r.jsx)(n.mn,{children:"20"}),(0,r.jsx)(n.mo,{separator:"true",children:","}),(0,r.jsx)(n.mo,{children:"+"}),(0,r.jsx)(n.mn,{children:"19"}),(0,r.jsx)(n.mo,{stretchy:"false",children:"]"})]}),(0,r.jsx)(n.annotation,{encoding:"application/x-tex",children:"[-20,+19]"})]})})}),(0,r.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,r.jsxs)(n.span,{className:"base",children:[(0,r.jsx)(n.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.jsx)(n.span,{className:"mopen",children:"["}),(0,r.jsx)(n.span,{className:"mord",children:"\u2212"}),(0,r.jsx)(n.span,{className:"mord",children:"20"}),(0,r.jsx)(n.span,{className:"mpunct",children:","}),(0,r.jsx)(n.span,{className:"mspace",style:{marginRight:"0.1667em"}}),(0,r.jsx)(n.span,{className:"mord",children:"+"}),(0,r.jsx)(n.span,{className:"mord",children:"19"}),(0,r.jsx)(n.span,{className:"mclose",children:"]"})]})})]}),"\uff0c\u9ed8\u8ba4\u503c\u4e3a0\uff1b",(0,r.jsx)(n.code,{children:"nice"}),"\u503c\u8d8a\u5927\uff0c\u4f18\u5148\u7ea7\u8d8a\u4f4e\u3002"]}),"\n",(0,r.jsxs)(n.li,{children:["\u5b9e\u65f6\u4f18\u5148\u7ea7\uff1a\u503c\u8d8a\u5927\u5219\u4f18\u5148\u7ea7\u8d8a\u9ad8\u3002(",(0,r.jsx)(n.code,{children:"RTPRIO"}),")"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"433-\u65f6\u95f4\u7247",children:"4.3.3 \u65f6\u95f4\u7247"}),"\n",(0,r.jsx)(n.p,{children:"\u8868\u660e\u8fdb\u7a0b\u5728\u88ab\u62a2\u5360\u524d\u6240\u80fd\u6301\u7eed\u8fd0\u884c\u7684\u65f6\u95f4\u3002"}),"\n",(0,r.jsx)(n.h2,{id:"45-linux-\u8c03\u5ea6\u7684\u5b9e\u73b0",children:"4.5 Linux \u8c03\u5ea6\u7684\u5b9e\u73b0"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"\u65f6\u95f4\u8bb0\u8d26"}),"\n",(0,r.jsx)(n.li,{children:"\u8fdb\u7a0b\u9009\u62e9"}),"\n",(0,r.jsx)(n.li,{children:"\u8c03\u5ea6\u5668\u5165\u53e3"}),"\n",(0,r.jsx)(n.li,{children:"\u7761\u7720\u548c\u5524\u9192"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"451-\u65f6\u95f4\u8bb0\u8d26",children:"4.5.1 \u65f6\u95f4\u8bb0\u8d26"}),"\n",(0,r.jsx)(n.p,{children:"\u6240\u6709\u7684\u8c03\u5ea6\u5668\u90fd\u5fc5\u987b\u5bf9\u8fdb\u7a0b\u8fd0\u884c\u65f6\u95f4\u505a\u8bb0\u8d26\u3002"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"\u8c03\u5ea6\u5668\u5b9e\u4f53\u7ed3\u6784"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:'\n/*\n * CFS stats for a schedulable entity (task, task-group etc)\n *\n * Current field usage histogram:\n *\n *     4 se->block_start\n *     4 se->run_node\n *     4 se->sleep_start\n *     6 se->load.weight\n */\nstruct sched_entity {\n        struct load_weight      load;           /* for load-balancing */\n        struct rb_node          run_node;\n        struct list_head        group_node;\n        unsigned int            on_rq;\n\n        u64                     exec_start;\n        u64                     sum_exec_runtime;\n        u64                     vruntime;\n        u64                     prev_sum_exec_runtime;\n\n        u64                     last_wakeup;\n        u64                     avg_overlap;\n\n        u64                     nr_migrations;\n\n        u64                     start_runtime;\n        u64                     avg_wakeup;\n\n#ifdef CONFIG_SCHEDSTATS\n        u64                     wait_start;\n        u64                     wait_max;\n        u64                     wait_count;\n        u64                     wait_sum;\n        u64                     iowait_count;\n        u64                     iowait_sum;\n\n        u64                     sleep_start;\n        u64                     sleep_max;\n        s64                     sum_sleep_runtime;\n\n        u64                     block_start;\n        u64                     block_max;\n        u64                     exec_max;\n        u64                     slice_max;\n\n        u64                     nr_migrations_cold;\n        u64                     nr_failed_migrations_affine;\n        u64                     nr_failed_migrations_running;\n        u64                     nr_failed_migrations_hot;\n        u64                     nr_forced_migrations;\n\n        u64                     nr_wakeups;\n        u64                     nr_wakeups_sync;\n        u64                     nr_wakeups_migrate;\n        u64                     nr_wakeups_local;\n        u64                     nr_wakeups_remote;\n        u64                     nr_wakeups_affine;\n        u64                     nr_wakeups_affine_attempts;\n        u64                     nr_wakeups_passive;\n        u64                     nr_wakeups_idle;\n#endif\n\n#ifdef CONFIG_FAIR_GROUP_SCHED\n        struct sched_entity     *parent;\n        /* rq on which this entity is (to be) queued: */\n        struct cfs_rq           *cfs_rq;\n        /* rq "owned" by this entity/group: */\n        struct cfs_rq           *my_q;\n#endif\n};\n'})}),"\n",(0,r.jsxs)(n.ol,{start:"2",children:["\n",(0,r.jsx)(n.li,{children:"\u865a\u62df\u5b9e\u65f6"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"vruntime \u53d8\u91cf\u5b58\u653e\u8fdb\u7a0b\u7684\u865a\u62df\u8fd0\u884c\u65f6\u95f4\uff0cCFS \u4f7f\u7528 vruntime \u53d8\u91cf\u6765\u8bb0\u5f55\u4e00\u4e2a\u7a0b\u5e8f\u7684\u5df2\u8fd0\u884c\u65f6\u95f4\u4ee5\u53ca\u8fd8\u5e94\u8be5\u518d\u8fd0\u884c\u65f6\u957f\u3002"}),"\n",(0,r.jsxs)(n.p,{children:["\u8bb0\u8d26\u529f\u80fd\u5b9e\u73b0\u4ee3\u7801\uff08",(0,r.jsx)(n.code,{children:"kernel/sched_fair.c"}),"\uff09"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:"#define schedstat_set(var, val)        do { var = (val); } while (0)\n#define entity_is_task(se)      (!se->my_q)\n\nstatic inline struct task_struct *task_of(struct sched_entity *se)\n{\n#ifdef CONFIG_SCHED_DEBUG\n        WARN_ON_ONCE(!entity_is_task(se));\n#endif\n        return container_of(se, struct task_struct, se);\n}\n\n\n/*\n * Update the current task's runtime statistics. Skip current tasks that\n * are not in our scheduling class.\n */\nstatic inline void\n__update_curr(struct cfs_rq *cfs_rq, struct sched_entity *curr,\n              unsigned long delta_exec)\n{\n        unsigned long delta_exec_weighted;\n\n        schedstat_set(curr->exec_max, max((u64)delta_exec, curr->exec_max));\n\n        curr->sum_exec_runtime += delta_exec;\n        schedstat_add(cfs_rq, exec_clock, delta_exec);\n        delta_exec_weighted = calc_delta_fair(delta_exec, curr);\n\n        curr->vruntime += delta_exec_weighted;\n        update_min_vruntime(cfs_rq);\n}\n\nstatic void update_curr(struct cfs_rq *cfs_rq)\n{\n        struct sched_entity *curr = cfs_rq->curr;\n        u64 now = rq_of(cfs_rq)->clock;\n        unsigned long delta_exec;\n\n        if (unlikely(!curr))\n                return;\n\n        /*\n         * Get the amount of time the current task was running\n         * since the last time we changed load (this cannot\n         * overflow on 32 bits):\n         */\n        delta_exec = (unsigned long)(now - curr->exec_start);\n        if (!delta_exec)\n                return;\n\n        __update_curr(cfs_rq, curr, delta_exec);\n        curr->exec_start = now;\n\n        if (entity_is_task(curr)) {\n                struct task_struct *curtask = task_of(curr);\n\n                trace_sched_stat_runtime(curtask, delta_exec, curr->vruntime);\n                cpuacct_charge(curtask, delta_exec);\n                account_group_exec_runtime(curtask, delta_exec);\n        }\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"452-\u8fdb\u7a0b\u9009\u62e9",children:"4.5.2 \u8fdb\u7a0b\u9009\u62e9"}),"\n",(0,r.jsxs)(n.p,{children:["\u4e00\u4e2a\u7406\u60f3\u4e2d\u5b8c\u7f8e\u7684\u591a\u4efb\u52a1\u5904\u7406\u5668\uff0c\u6240\u6709\u53ef\u8fd0\u884c\u8fdb\u7a0b\u7684 ",(0,r.jsx)(n.code,{children:"vruntime"})," \u503c\u5c06\u4e00\u81f4\u3002\nCFS \u8bd5\u56fe\u5229\u7528\u4e00\u4e2a\u7b80\u5355\u7684\u89c4\u5219\u53bb\u5747\u8861\u8fdb\u7a0b\u7684\u865a\u62df\u8fd0\u884c\u65f6\u95f4\uff1a\u5f53CFS\u9700\u8981\u4e0b\u4e00\u4e2a\u8fd0\u884c\u8fdb\u7a0b\u65f6\uff0c\u5b83\u4f1a\u6311\u4e00\u4e2a\u5177\u6709 ",(0,r.jsx)(n.code,{children:"vruntime"})," \u7684\u8fdb\u7a0b\u3002"]}),"\n",(0,r.jsxs)(n.p,{children:["CFS\u7b97\u6cd5",(0,r.jsx)(n.strong,{children:"\u6838\u5fc3"}),"\uff1a\u9009\u62e9\u5177\u6709\u5c0f",(0,r.jsx)(n.code,{children:"vruntime"}),"\u7684\u4efb\u52a1\u3002"]}),"\n",(0,r.jsxs)(n.p,{children:["CFS\u4f7f\u7528",(0,r.jsx)(n.strong,{children:"\u7ea2\u9ed1\u6811"}),"\u6765\u7ec4\u7ec7\u53ef\u8fd0\u884c\u8fdb\u7a0b\u961f\u5217 \uff0c\u5e76\u5229\u7528\u5176\u8fc5\u901f\u627e\u5230\u6700\u5c0f",(0,r.jsx)(n.code,{children:"vruntime"}),"\u503c \u7684\u8fdb\u7a0b\u3002"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"\u6311\u9009\u4e0b\u4e00\u4e2a\u4efb\u52a1"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["\u5728 rbtree \u4e2d\u5bfb\u627e\u8282\u70b9 \uff08",(0,r.jsx)(n.code,{children:"kernel/sched_fail.c"}),"\uff09"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:"static struct sched_entity *__pick_next_entity(struct cfs_rq *cfs_rq)\n{\n        struct rb_node *left = cfs_rq->rb_leftmost;\n\n        if (!left)\n                return NULL;\n\n        return rb_entry(left, struct sched_entity, run_node);\n}\n\nstatic struct sched_entity *pick_next_entity(struct cfs_rq *cfs_rq)\n{\n        struct sched_entity *se = __pick_next_entity(cfs_rq);\n        struct sched_entity *left = se;\n\n        if (cfs_rq->next && wakeup_preempt_entity(cfs_rq->next, left) < 1)\n                se = cfs_rq->next;\n\n        /*\n         * Prefer last buddy, try to return the CPU to a preempted task.\n         */\n        if (cfs_rq->last && wakeup_preempt_entity(cfs_rq->last, left) < 1)\n                se = cfs_rq->last;\n\n        clear_buddies(cfs_rq, se);\n\n        return se;\n}\n\n"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"__pick_next_entity()"}),"\u51fd\u6570\u672c\u8eab\u4e0d\u4f1a\u904d\u5386\u7ea2\u9ed1\u6811\u5bfb\u627e\u6700\u5de6\u53f6\u5b50\u8282\u70b9\uff0c\u8be5\u8282\u70b9\u5df2\u7ecf\u7f13\u5b58\u5728rb_leftmost\u5b57\u6bb5\u4e2d\u3002"]}),"\n"]}),"\n",(0,r.jsxs)(n.ol,{start:"2",children:["\n",(0,r.jsx)(n.li,{children:"\u5411\u6811\u4e2d\u52a0\u5165\u8fdb\u7a0b"}),"\n"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"\u5e73\u8861\u4e8c\u53c9\u6811\u7684\u57fa\u672c\u89c4\u5219 \uff1a\u5982\u679c\u952e\u503c \u5c0f\u4e8e\u5f53\u524d\u8282\u70b9\u7684\u952e\u503c\uff0c\u5219\u9700\u8f6c\u5411\u6811\u7684\u5de6\u5206\u652f\uff1b\u5426\u5219\u8f6c\u5411\u53f3\u5206\u652f\u3002"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:"/*\n * Enqueue an entity into the rb-tree:\n */\nstatic void __enqueue_entity(struct cfs_rq *cfs_rq, struct sched_entity *se)\n{\n        struct rb_node **link = &cfs_rq->tasks_timeline.rb_node;\n        struct rb_node *parent = NULL;\n        struct sched_entity *entry;\n        s64 key = entity_key(cfs_rq, se);\n        int leftmost = 1;\n\n        /*\n         * Find the right place in the rbtree:\n         */\n        while (*link) {\n                parent = *link;\n                entry = rb_entry(parent, struct sched_entity, run_node);\n                /*\n                 * We dont care about collisions. Nodes with\n                 * the same key stay together.\n                 */\n                if (key < entity_key(cfs_rq, entry)) {\n                        link = &parent->rb_left;\n                } else {\n                        link = &parent->rb_right;\n                        leftmost = 0;\n                }\n        }\n\n        /*\n         * Maintain a cache of leftmost tree entries (it is frequently\n         * used):\n         */\n        if (leftmost)\n                cfs_rq->rb_leftmost = &se->run_node;\n\n        rb_link_node(&se->run_node, parent, link);\n        rb_insert_color(&se->run_node, &cfs_rq->tasks_timeline);\n}\n\n#define ENQUEUE_WAKEUP  1\n#define ENQUEUE_MIGRATE 2\n\nstatic void\nenqueue_entity(struct cfs_rq *cfs_rq, struct sched_entity *se, int flags)\n{\n        /*\n         * Update the normalized vruntime before updating min_vruntime\n         * through callig update_curr().\n         */\n        if (!(flags & ENQUEUE_WAKEUP) || (flags & ENQUEUE_MIGRATE))\n                se->vruntime += cfs_rq->min_vruntime;\n\n        /*\n         * Update run-time statistics of the 'current'.\n         */\n        update_curr(cfs_rq);\n        account_entity_enqueue(cfs_rq, se);\n\n        if (flags & ENQUEUE_WAKEUP) {\n                place_entity(cfs_rq, se, 0);\n                enqueue_sleeper(cfs_rq, se);\n        }\n\n        update_stats_enqueue(cfs_rq, se);\n        check_spread(cfs_rq, se);\n        if (se != cfs_rq->curr)\n                __enqueue_entity(cfs_rq, se);\n}\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"3",children:["\n",(0,r.jsx)(n.li,{children:"\u4ece\u6811\u4e2d\u5220\u9664\u8fdb\u7a0b"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"\u53d1\u751f\u5728\u8fdb\u7a0b\u5835\u585e\uff08\u53d8\u4e3a\u4e0d\u53ef\u8fd0\u884c\u72b6\u6001\uff09\u6216\u8005\u7ec8\u6b62\u65f6\uff08\u7ed3\u675f\u8fd0\u884c\uff09\uff1a"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:"static void __dequeue_entity(struct cfs_rq *cfs_rq, struct sched_entity *se)\n{\n        if (cfs_rq->rb_leftmost == &se->run_node) {\n                struct rb_node *next_node;\n\n                next_node = rb_next(&se->run_node);\n                cfs_rq->rb_leftmost = next_node;\n        }\n\n        rb_erase(&se->run_node, &cfs_rq->tasks_timeline);\n}\n\n\nstatic void\ndequeue_entity(struct cfs_rq *cfs_rq, struct sched_entity *se, int sleep)\n{\n        /*\n         * Update run-time statistics of the 'current'.\n         */\n        update_curr(cfs_rq);\n\n        update_stats_dequeue(cfs_rq, se);\n        if (sleep) {\n#ifdef CONFIG_SCHEDSTATS\n                if (entity_is_task(se)) {\n                        struct task_struct *tsk = task_of(se);\n\n                        if (tsk->state & TASK_INTERRUPTIBLE)\n                                se->sleep_start = rq_of(cfs_rq)->clock;\n                        if (tsk->state & TASK_UNINTERRUPTIBLE)\n                                se->block_start = rq_of(cfs_rq)->clock;\n                }\n#endif\n        }\n\n        clear_buddies(cfs_rq, se);\n\n        if (se != cfs_rq->curr)\n                __dequeue_entity(cfs_rq, se);\n        account_entity_dequeue(cfs_rq, se);\n        update_min_vruntime(cfs_rq);\n\n        /*\n         * Normalize the entity after updating the min_vruntime because the\n         * update can refer to the ->curr item and we need to reflect this\n         * movement in our normalized position.\n         */\n        if (!sleep)\n                se->vruntime -= cfs_rq->min_vruntime;\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"453-\u8c03\u5ea6\u5668\u5165\u53e3",children:"4.5.3 \u8c03\u5ea6\u5668\u5165\u53e3"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"schedule()"}),"\uff0c\u5b9a\u4e49\u5728 ",(0,r.jsx)(n.code,{children:"kernel/sched.c"}),". \u8c03\u7528",(0,r.jsx)(n.code,{children:"pick_next_task()"}),"\u4ee5\u4f18\u5148\u7ea7\u4ece\u9ad8\u5230\u4f4e\u7684\u987a\u5e8f\u68c0\u67e5\u6bcf\u4e00\u4e2a\u8c03\u5ea6\u7c7b\u3002"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:"#define asmlinkage CPP_ASMLINKAGE __attribute__((regparm(0)))\nG\n/*\n * schedule() is the main scheduler function.\n */\nasmlinkage void __sched schedule(void)\n{\n\tstruct task_struct *prev, *next;\n\tunsigned long *switch_count;\n\tstruct rq *rq;\n\tint cpu;\n\nneed_resched:\n\tpreempt_disable();\n\tcpu = smp_processor_id();\n\trq = cpu_rq(cpu);\n\trcu_sched_qs(cpu);\n\tprev = rq->curr;\n\tswitch_count = &prev->nivcsw;\n\n\trelease_kernel_lock(prev);\nneed_resched_nonpreemptible:\n\n\tschedule_debug(prev);\n\n\tif (sched_feat(HRTICK))\n\t\thrtick_clear(rq);\n\n\traw_spin_lock_irq(&rq->lock);\n\tupdate_rq_clock(rq);\n\tclear_tsk_need_resched(prev);\n\n\tif (prev->state && !(preempt_count() & PREEMPT_ACTIVE)) {\n\t\tif (unlikely(signal_pending_state(prev->state, prev)))\n\t\t\tprev->state = TASK_RUNNING;\n\t\telse\n\t\t\tdeactivate_task(rq, prev, 1);\n\t\tswitch_count = &prev->nvcsw;\n\t}\n\n\tpre_schedule(rq, prev);\n\n\tif (unlikely(!rq->nr_running))\n\t\tidle_balance(cpu, rq);\n\n\tput_prev_task(rq, prev);\n\tnext = pick_next_task(rq);\n\n\tif (likely(prev != next)) {\n\t\tsched_info_switch(prev, next);\n\t\tperf_event_task_sched_out(prev, next);\n\n\t\trq->nr_switches++;\n\t\trq->curr = next;\n\t\t++*switch_count;\n\n\t\tcontext_switch(rq, prev, next); /* unlocks the rq */\n\t\t/*\n\t\t * the context switch might have flipped the stack from under\n\t\t * us, hence refresh the local variables.\n\t\t */\n\t\tcpu = smp_processor_id();\n\t\trq = cpu_rq(cpu);\n\t} else\n\t\traw_spin_unlock_irq(&rq->lock);\n\n\tpost_schedule(rq);\n\n\tif (unlikely(reacquire_kernel_lock(current) < 0)) {\n\t\tprev = rq->curr;\n\t\tswitch_count = &prev->nivcsw;\n\t\tgoto need_resched_nonpreemptible;\n\t}\n\n\tpreempt_enable_no_resched();\n\tif (need_resched())\n\t\tgoto need_resched;\n}\nEXPORT_SYMBOL(schedule);\n\n/*\n * Pick up the highest-prio task:\n */\nstatic inline struct task_struct *\npick_next_task(struct rq *rq)\n{\n        const struct sched_class *class;\n        struct task_struct *p;\n\n        /*\n         * Optimization: we know that if all tasks are in\n         * the fair class we can call that function directly:\n         */\n        if (likely(rq->nr_running == rq->cfs.nr_running)) {\n                p = fair_sched_class.pick_next_task(rq);\n                if (likely(p))\n                        return p;\n        }\n\n        class = sched_class_highest;\n        for ( ; ; ) {\n                p = class->pick_next_task(rq);\n                if (p)\n                        return p;\n                /*\n                 * Will never be NULL as the idle class always\n                 * returns a non-NULL p:\n                 */\n                class = class->next;\n        }\n}\n\n"})}),"\n",(0,r.jsx)(n.h3,{id:"454-\u7761\u7720\u548c\u5524\u9192",children:"4.5.4 \u7761\u7720\u548c\u5524\u9192"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"\u7b49\u5f85\u961f\u5217"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"\u521b\u5efa\u7b49\u5f85\u961f\u5217\uff1a"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:"#define init_waitqueue_head(q)                          \\\n        do {                                            \\\n                static struct lock_class_key __key;     \\\n                                                        \\\n                __init_waitqueue_head((q), &__key);     \\\n        } while (0)\n"})}),"\n",(0,r.jsx)(n.p,{children:"\u5185\u6838\u4e2d\u8fdb\u884c\u4f11\u7720\u7684\u64cd\u4f5c"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:"/* \u2018q\u2019 is the wait queue we wish to sleep on */\nDEFINE_WAIT(wait);\nadd_wait_queue(q, &wait);\nwhile (!condition) { /* condition is the event that we are waiting for */\n        prepare_to_wait(&q, &wait, TASK_INTERRUPTIBLE);\n        if (signal_pending(current))\n/* handle signal */\n                schedule();\n}\nfinish_wait(&q, &wait);\n"})}),"\n",(0,r.jsx)(n.p,{children:"\u8fdb\u7a0b\u901a\u8fc7\u4ee5\u4e0b\u6b65\u9aa4\u5c06\u81ea\u5df1\u52a0\u5165\u5230\u4e00\u4e2a\u7b49\u5f85\u961f\u5217\u4e2d\uff1a"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"\u8c03\u7528DEFINE_WAIT\u5b8f\u521b\u5efa\u4e00\u4e2a\u7b49\u5f85\u961f\u5217"}),"\n",(0,r.jsxs)(n.li,{children:["\u8c03\u7528",(0,r.jsx)(n.code,{children:"add_wait_queue"}),"\u628a\u81ea\u5df1\u52a0\u5165\u961f\u5217\u3002\u8be5\u961f\u5217\u4f1a\u5728\u6ee1\u8db3\u6761\u4ef6\u65f6\u5524\u9192\u5b83\u3002"]}),"\n",(0,r.jsxs)(n.li,{children:["\u8c03\u7528",(0,r.jsx)(n.code,{children:"prepare_to_wait()"}),"\u5c06\u8fdb\u7a0b\u7684\u72b6\u6001\u53d8\u66f4\u4e3a",(0,r.jsx)(n.code,{children:"TASK_INTERRUPTIBLE"}),"\u6216\u8005",(0,r.jsx)(n.code,{children:"TASK_UNINTERRUPTIBLE"}),"\u3002"]}),"\n",(0,r.jsxs)(n.li,{children:["\u5982\u679c\u72b6\u6001\u88ab \u8bbe\u7f6e\u4e3a",(0,r.jsx)(n.code,{children:"TASK_INTERRUPTIBLE"}),"\uff0c\u5219\u4fe1\u53f7\u5524\u9192\u8fdb\u7a0b"]}),"\n",(0,r.jsxs)(n.li,{children:["\u5f53\u8fdb\u7a0b\u88ab\u5524\u9192\u65f6\u518d\u6b21\u68c0\u67e5\u6761\u4ef6\u3002\u662f\u5219\u9000\u51fa\u5faa\u73af\uff0c\u5426\u5219\u518d\u6b21\u8c03\u7528",(0,r.jsx)(n.code,{children:"schedule()"}),"\u91cd\u590d"]}),"\n",(0,r.jsxs)(n.li,{children:["\u6761\u4ef6\u6ee1\u8db3\u540e\u5c06\u81ea\u5df1\u8bbe\u7f6e\u4e3a",(0,r.jsx)(n.code,{children:"TASK_RUNNING"}),"\u5e76\u8c03\u7528",(0,r.jsx)(n.code,{children:"finish_wait()"}),"\u9000\u51fa\u7b49\u5f85\u961f\u5217"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["\u4ece\u901a\u77e5\u6587\u4ef6\u63cf\u8ff0\u7b26\u4e2d\u83b7\u53d6\u4fe1\u606f(",(0,r.jsx)(n.code,{children:"fs/notify/inotify/inotify_user.c"}),"):"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:"static ssize_t inotify_read(struct file *file, char __user *buf,\n                            size_t count, loff_t *pos)\n{\n        struct fsnotify_group *group;\n        struct fsnotify_event *kevent;\n        char __user *start;\n        int ret;\n        DEFINE_WAIT(wait);\n\n        start = buf;\n        group = file->private_data;\n\n        while (1) {\n                prepare_to_wait(&group->notification_waitq, &wait, TASK_INTERRUPTIBLE);\n\n                mutex_lock(&group->notification_mutex);\n                kevent = get_one_event(group, count);\n                mutex_unlock(&group->notification_mutex);\n\n                if (kevent) {\n                        ret = PTR_ERR(kevent);\n                        if (IS_ERR(kevent))\n                                break;\n                        ret = copy_event_to_user(group, kevent, buf);\n                        fsnotify_put_event(kevent);\n                        if (ret < 0)\n                                break;\n                        buf += ret;\n                        count -= ret;\n                        continue;\n                }\n\n                ret = -EAGAIN;\n                if (file->f_flags & O_NONBLOCK)\n                        break;\n                ret = -EINTR;\n                if (signal_pending(current))\n                        break;\n\n                if (start != buf)\n                        break;\n\n                schedule();\n        }\n\n        finish_wait(&group->notification_waitq, &wait);\n        if (start != buf && ret != -EFAULT)\n                ret = buf - start;\n        return ret;\n}\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"2",children:["\n",(0,r.jsx)(n.li,{children:"\u5524\u9192"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:"#define wake_up(x)\t\t\t__wake_up(x, TASK_NORMAL, 1, NULL)\n\n/**\n * __wake_up - wake up threads blocked on a waitqueue.\n * @q: the waitqueue\n * @mode: which threads\n * @nr_exclusive: how many wake-one or wake-many threads to wake up\n * @key: is directly passed to the wakeup function\n *\n * It may be assumed that this function implies a write memory barrier before\n * changing the task state if and only if any tasks are woken up.\n */\nvoid __wake_up(wait_queue_head_t *q, unsigned int mode,\n               int nr_exclusive, void *key)\n{\n\tunsigned long flags;\n\n\tspin_lock_irqsave(&q->lock, flags);\n\t__wake_up_common(q, mode, nr_exclusive, 0, key);\n\tspin_unlock_irqrestore(&q->lock, flags);\n}\nEXPORT_SYMBOL(__wake_up);\n"})}),"\n",(0,r.jsx)(n.h2,{id:"46-\u62a2\u5360\u548c\u4e0a\u4e0b\u6587\u5207\u6362",children:"4.6 \u62a2\u5360\u548c\u4e0a\u4e0b\u6587\u5207\u6362"}),"\n",(0,r.jsxs)(n.p,{children:["\u4ece\u4e00\u4e2a\u53ef\u6267\u884c\u8fdb\u7a0b\u5207\u6362\u5230\u53e6\u4e00\u4e2a\u53ef\u6267\u884c\u8fdb\u7a0b\u3002\u7531\u5b9a\u4e49\u5728 ",(0,r.jsx)(n.code,{children:"kernel/sched.c"}),"\u3000\u4e2d\u7684",(0,r.jsx)(n.code,{children:"context_switch()"}),"\u5904\u7406\u3002\u9009\u51fa\u6765\u51c6\u5907\u6295\u5165\u8fd0\u884c\u65f6 ",(0,r.jsx)(n.code,{children:"schedule()"}),"\u8c03\u7528\u5b83\u3002"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\u8c03\u7528\u58f0\u660e\u5728",(0,r.jsx)(n.code,{children:"<asm/mmu_context.h"}),">\u4e2d",(0,r.jsx)(n.code,{children:"switch_mm()"}),"\u8d1f\u8d23\u628a\u865a\u62df\u5185\u5b58\u4ece\u4e0a\u4e00\u4e2a\u8fdb\u7a0b\u6620\u5c04\u5230\u65b0\u8fdb\u7a0b\u4e2d\u3002"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:"static inline void switch_mm(struct mm_struct *prev, struct mm_struct *next,\n\t\t\t     struct task_struct *tsk)\n{\n\tunsigned cpu = smp_processor_id();\n\n\tif (likely(prev != next)) {\n\t\t/* stop flush ipis for the previous mm */\n\t\tcpumask_clear_cpu(cpu, mm_cpumask(prev));\n#ifdef CONFIG_SMP\n\t\tpercpu_write(cpu_tlbstate.state, TLBSTATE_OK);\n\t\tpercpu_write(cpu_tlbstate.active_mm, next);\n#endif\n\t\tcpumask_set_cpu(cpu, mm_cpumask(next));\n\n\t\t/* Re-load page tables */\n\t\tload_cr3(next->pgd);\n\n\t\t/*\n\t\t * load the LDT, if the LDT is different:\n\t\t */\n\t\tif (unlikely(prev->context.ldt != next->context.ldt))\n\t\t\tload_LDT_nolock(&next->context);\n\t}\n#ifdef CONFIG_SMP\n\telse {\n\t\tpercpu_write(cpu_tlbstate.state, TLBSTATE_OK);\n\t\tBUG_ON(percpu_read(cpu_tlbstate.active_mm) != next);\n\n\t\tif (!cpumask_test_and_set_cpu(cpu, mm_cpumask(next))) {\n\t\t\t/* We were in lazy tlb mode and leave_mm disabled\n\t\t\t * tlb flush IPI delivery. We must reload CR3\n\t\t\t * to make sure to use no freed page tables.\n\t\t\t */\n\t\t\tload_cr3(next->pgd);\n\t\t\tload_LDT_nolock(&next->context);\n\t\t}\n\t}\n#endif\n}\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\u8c03\u7528\u58f0\u660e\u5728",(0,r.jsx)(n.code,{children:"<asm/system.h>"}),"\u4e2d\u7684",(0,r.jsx)(n.code,{children:"switch_to()"}),"\u8d1f\u8d23\u4ece\u4e0a\u4e00\u4e2a\u8fdb\u7a0b\u7684\u5904\u7406\u5668\u72b6\u6001\u5207\u6362\u5230\u65b0\u8fdb\u7a0b\u7684\u5904\u7406\u5668\u72b6\u6001\u3002\u5305\u62ec\u4fdd\u5b58\u3001\u6062\u590d\u6808\u4fe1\u606f\u548c\u5bc4\u5b58\u5668\u4fe1\u606f\uff0c\u4ee5\u53ca\u5176\u5b83\u4e0e\u4f53\u7cfb\u7ed3\u6784\u76f8\u5173\u7684\u72b6\u6001\u4fe1\u606f\u3002"]}),"\n"]}),"\n",(0,r.jsxs)("div",{style:{textAlign:"center"},children:[(0,r.jsx)("img",{src:t(13360).A,style:{zoom:"33%"}}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"\u56fe 4-1 \u4f11\u7720\u548c\u5524\u9192"})})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:"static void\nenqueue_task(struct rq *rq, struct task_struct *p, int wakeup, bool head)\n{\n\tif (wakeup)\n\t\tp->se.start_runtime = p->se.sum_exec_runtime;\n\n\tsched_info_queued(p);\n\tp->sched_class->enqueue_task(rq, p, wakeup, head);\n\tp->se.on_rq = 1;\n}\n\nstatic void dequeue_task(struct rq *rq, struct task_struct *p, int sleep)\n{\n\tif (sleep) {\n\t\tif (p->se.last_wakeup) {\n\t\t\tupdate_avg(&p->se.avg_overlap,\n\t\t\t\tp->se.sum_exec_runtime - p->se.last_wakeup);\n\t\t\tp->se.last_wakeup = 0;\n\t\t} else {\n\t\t\tupdate_avg(&p->se.avg_wakeup,\n\t\t\t\tsysctl_sched_wakeup_granularity);\n\t\t}\n\t}\n\n\tsched_info_dequeued(p);\n\tp->sched_class->dequeue_task(rq, p, sleep);\n\tp->se.on_rq = 0;\n}\n\n/*\n * activate_task - move a task to the runqueue.\n */\nstatic void activate_task(struct rq *rq, struct task_struct *p, int wakeup)\n{\n\tif (task_contributes_to_load(p))\n\t\trq->nr_uninterruptible--;\n\n\tenqueue_task(rq, p, wakeup, false);\n\tinc_nr_running(rq);\n}\n\n/*\n * deactivate_task - remove a task from the runqueue.\n */\nstatic void deactivate_task(struct rq *rq, struct task_struct *p, int sleep)\n{\n\tif (task_contributes_to_load(p))\n\t\trq->nr_uninterruptible++;\n\n\tdequeue_task(rq, p, sleep);\n\tdec_nr_running(rq);\n}\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:'/***\n * try_to_wake_up - wake up a thread\n * @p: the to-be-woken-up thread\n * @state: the mask of task states that can be woken\n * @sync: do a synchronous wakeup?\n *\n * Put it on the run-queue if it\'s not already there. The "current"\n * thread is always on the run-queue (except when the actual\n * re-schedule is in progress), and as such you\'re allowed to do\n * the simpler "current->state = TASK_RUNNING" to mark yourself\n * runnable without the overhead of this.\n *\n * returns failure only if the task is already active.\n */\nstatic int try_to_wake_up(struct task_struct *p, unsigned int state,\n\t\t\t  int wake_flags)\n{\n\tint cpu, orig_cpu, this_cpu, success = 0;\n\tunsigned long flags;\n\tstruct rq *rq;\n\n\tif (!sched_feat(SYNC_WAKEUPS))\n\t\twake_flags &= ~WF_SYNC;\n\n\tthis_cpu = get_cpu();\n\n\tsmp_wmb();\n\trq = task_rq_lock(p, &flags);\n\tupdate_rq_clock(rq);\n\tif (!(p->state & state))\n\t\tgoto out;\n\n\tif (p->se.on_rq)\n\t\tgoto out_running;\n\n\tcpu = task_cpu(p);\n\torig_cpu = cpu;\n\n#ifdef CONFIG_SMP\n\tif (unlikely(task_running(rq, p)))\n\t\tgoto out_activate;\n\n\t/*\n\t * In order to handle concurrent wakeups and release the rq->lock\n\t * we put the task in TASK_WAKING state.\n\t *\n\t * First fix up the nr_uninterruptible count:\n\t */\n\tif (task_contributes_to_load(p))\n\t\trq->nr_uninterruptible--;\n\tp->state = TASK_WAKING;\n\n\tif (p->sched_class->task_waking)\n\t\tp->sched_class->task_waking(rq, p);\n\n\t__task_rq_unlock(rq);\n\n\tcpu = select_task_rq(p, SD_BALANCE_WAKE, wake_flags);\n\tif (cpu != orig_cpu) {\n\t\t/*\n\t\t * Since we migrate the task without holding any rq->lock,\n\t\t * we need to be careful with task_rq_lock(), since that\n\t\t * might end up locking an invalid rq.\n\t\t */\n\t\tset_task_cpu(p, cpu);\n\t}\n\n\trq = cpu_rq(cpu);\n\traw_spin_lock(&rq->lock);\n\tupdate_rq_clock(rq);\n\n\t/*\n\t * We migrated the task without holding either rq->lock, however\n\t * since the task is not on the task list itself, nobody else\n\t * will try and migrate the task, hence the rq should match the\n\t * cpu we just moved it to.\n\t */\n\tWARN_ON(task_cpu(p) != cpu);\n\tWARN_ON(p->state != TASK_WAKING);\n\n#ifdef CONFIG_SCHEDSTATS\n\tschedstat_inc(rq, ttwu_count);\n\tif (cpu == this_cpu)\n\t\tschedstat_inc(rq, ttwu_local);\n\telse {\n\t\tstruct sched_domain *sd;\n\t\tfor_each_domain(this_cpu, sd) {\n\t\t\tif (cpumask_test_cpu(cpu, sched_domain_span(sd))) {\n\t\t\t\tschedstat_inc(sd, ttwu_wake_remote);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n#endif /* CONFIG_SCHEDSTATS */\n\nout_activate:\n#endif /* CONFIG_SMP */\n\tschedstat_inc(p, se.nr_wakeups);\n\tif (wake_flags & WF_SYNC)\n\t\tschedstat_inc(p, se.nr_wakeups_sync);\n\tif (orig_cpu != cpu)\n\t\tschedstat_inc(p, se.nr_wakeups_migrate);\n\tif (cpu == this_cpu)\n\t\tschedstat_inc(p, se.nr_wakeups_local);\n\telse\n\t\tschedstat_inc(p, se.nr_wakeups_remote);\n\n\t/*\n\t * =====> ACTIVATE TASK <=====\n\t */\n\tactivate_task(rq, p, 1);\n\tsuccess = 1;\n\n\t/*\n\t * Only attribute actual wakeups done by this task.\n\t */\n\tif (!in_interrupt()) {\n\t\tstruct sched_entity *se = &current->se;\n\t\tu64 sample = se->sum_exec_runtime;\n\n\t\tif (se->last_wakeup)\n\t\t\tsample -= se->last_wakeup;\n\t\telse\n\t\t\tsample -= se->start_runtime;\n\t\tupdate_avg(&se->avg_wakeup, sample);\n\n\t\tse->last_wakeup = se->sum_exec_runtime;\n\t}\n\nout_running:\n\ttrace_sched_wakeup(rq, p, success);\n\tcheck_preempt_curr(rq, p, wake_flags);\n\n\tp->state = TASK_RUNNING;\n#ifdef CONFIG_SMP\n\tif (p->sched_class->task_woken)\n\t\tp->sched_class->task_woken(rq, p);\n\n\tif (unlikely(rq->idle_stamp)) {\n\t\tu64 delta = rq->clock - rq->idle_stamp;\n\t\tu64 max = 2*sysctl_sched_migration_cost;\n\n\t\tif (delta > max)\n\t\t\trq->avg_idle = max;\n\t\telse\n\t\t\tupdate_avg(&rq->avg_idle, delta);\n\t\trq->idle_stamp = 0;\n\t}\n#endif\nout:\n\ttask_rq_unlock(rq, &flags);\n\tput_cpu();\n\n\treturn success;\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["\u8868 4-1 \u7528\u4e8e\u8bbf\u95ee\u548c\u64cd\u4f5c ",(0,r.jsx)(n.code,{children:"need_resched"})," \u7684\u51fd\u6570"]}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"\u51fd\u6570"}),(0,r.jsx)(n.th,{children:"\u76ee\u7684"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"set_tsk_need_resched()"})}),(0,r.jsxs)(n.td,{children:["\u8bbe\u7f6e\u6307\u5b9a\u8fdb\u7a0b\u4e2d\u7684",(0,r.jsx)(n.code,{children:"need_resched"}),"\u6807\u5fd7"]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"clear_tsk_need_resched()"})}),(0,r.jsxs)(n.td,{children:["\u6e05\u9664\u6307\u5b9a\u8fdb\u7a0b\u4e2d\u7684",(0,r.jsx)(n.code,{children:"need_resched"}),"\u6807\u5fd7"]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"need_resched()"})}),(0,r.jsxs)(n.td,{children:["\u68c0\u67e5",(0,r.jsx)(n.code,{children:"need_resched"}),"\u6807\u5fd7\u7684\u503c\uff0c\u5982\u679c\u88ab\u8bbe\u7f6e\u5c31\u8fd4\u56de",(0,r.jsx)(n.code,{children:"true"}),"\uff0c\u5426\u5219\u8fd4\u56de",(0,r.jsx)(n.code,{children:"false"}),"\u3002"]})]})]})]}),"\n",(0,r.jsx)(n.h3,{id:"461-\u7528\u6237\u62a2\u5360",children:"4.6.1 \u7528\u6237\u62a2\u5360"}),"\n",(0,r.jsxs)(n.p,{children:["\u5185\u6838\u8fd4\u56de\u7528\u6237\u7a7a\u95f4\u7684\u65f6\u5019\uff0c\u5982\u679c ",(0,r.jsx)(n.code,{children:"need_resched"})," \u6807\u5fd7\u88ab\u8bbe\u7f6e\uff0c\u4f1a\u5bfc\u81f4 ",(0,r.jsx)(n.code,{children:"schedule()"})," \u88ab\u8c03\u7528\uff0c\u5c31\u4f1a\u53d1\u751f\u7528\u6237\u62a2\u5360\u3002"]}),"\n",(0,r.jsx)(n.h3,{id:"462-\u5185\u6838\u62a2\u5360",children:"4.6.2 \u5185\u6838\u62a2\u5360"}),"\n",(0,r.jsx)(n.p,{children:"\u5185\u6838\u53ef\u4ee5\u5728\u4efb\u4f55\u65f6\u95f4\u62a2\u5360\u6b63\u5728\u8fd0\u884c\u7684\u4efb\u52a1\u3002"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"preempt_count "}),": \u521d\u59cb\u5316\u4e3a0\uff0c\u4f7f\u7528\u9501\u65f6\u52a01\uff0c\u91ca\u653e\u9501\u65f6\u51cf1\u3002\u6570\u503c\u4e3a0\u65f6\u53ef\u4ee5\u88ab\u62a2\u5360\u3002---- \u4fe1\u53f7\u91cf\uff1f"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:"#if defined(CONFIG_PREEMPT) && (defined(CONFIG_DEBUG_PREEMPT) || \\\n\t\t\t\tdefined(CONFIG_PREEMPT_TRACER))\n\nvoid __kprobes add_preempt_count(int val)\n{\n#ifdef CONFIG_DEBUG_PREEMPT\n\t/*\n\t * Underflow?\n\t */\n\tif (DEBUG_LOCKS_WARN_ON((preempt_count() < 0)))\n\t\treturn;\n#endif\n\tpreempt_count() += val;\n#ifdef CONFIG_DEBUG_PREEMPT\n\t/*\n\t * Spinlock count overflowing soon?\n\t */\n\tDEBUG_LOCKS_WARN_ON((preempt_count() & PREEMPT_MASK) >=\n\t\t\t\tPREEMPT_MASK - 10);\n#endif\n\tif (preempt_count() == val)\n\t\ttrace_preempt_off(CALLER_ADDR0, get_parent_ip(CALLER_ADDR1));\n}\nEXPORT_SYMBOL(add_preempt_count);\n\nvoid __kprobes sub_preempt_count(int val)\n{\n#ifdef CONFIG_DEBUG_PREEMPT\n\t/*\n\t * Underflow?\n\t */\n\tif (DEBUG_LOCKS_WARN_ON(val > preempt_count()))\n\t\treturn;\n\t/*\n\t * Is the spinlock portion underflowing?\n\t */\n\tif (DEBUG_LOCKS_WARN_ON((val < PREEMPT_MASK) &&\n\t\t\t!(preempt_count() & PREEMPT_MASK)))\n\t\treturn;\n#endif\n\n\tif (preempt_count() == val)\n\t\ttrace_preempt_on(CALLER_ADDR0, get_parent_ip(CALLER_ADDR1));\n\tpreempt_count() -= val;\n}\nEXPORT_SYMBOL(sub_preempt_count);\n\n#endif\n"})}),"\n",(0,r.jsx)(n.p,{children:"\u5185\u6838\u62a2\u5360\u7684\u53d1\u751f\u573a\u666f\uff1a"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u6b63\u5728\u6267\u884c\uff0c\u4e14\u8fd4\u56de\u5185\u6838\u7a7a\u95f4\u4e4b\u524d"}),"\n",(0,r.jsx)(n.li,{children:"\u5185\u6838\u4ee3\u7801\u518d\u4e00\u6b21\u5177\u6709\u53ef\u62a2\u5360\u6027\u7684\u65f6\u5019"}),"\n",(0,r.jsxs)(n.li,{children:["\u5185\u6838\u4e2d\u7684\u4efb\u52a1\u663e\u5f0f\u5730\u8c03\u7528",(0,r.jsx)(n.code,{children:"schedule()"})]}),"\n",(0,r.jsxs)(n.li,{children:["\u5185\u6838\u4e2d\u7684\u4efb\u52a1\u963b\u585e\uff08\u5bfc\u81f4\u8c03\u7528",(0,r.jsx)(n.code,{children:"schedule()"}),"\uff09"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"47-\u5b9e\u65f6\u8c03\u5ea6\u7b56\u7565",children:"4.7 \u5b9e\u65f6\u8c03\u5ea6\u7b56\u7565"}),"\n",(0,r.jsxs)(n.p,{children:["\u5b9e\u73b0\u5b9a\u4e49\u5728\uff1a",(0,r.jsx)(n.code,{children:"kernel/sched_rt.c"})]}),"\n",(0,r.jsxs)(n.p,{children:["\u5b9e\u65f6\u8c03\u5ea6\u7b56\u7565\uff1a",(0,r.jsx)(n.code,{children:"SCHED_FIFO"}),"\u3001",(0,r.jsx)(n.code,{children:"SCHED_RR"}),"\uff0c\u975e\u5b9e\u65f6\u8c03\u5ea6\u7b56\u7565\uff1a",(0,r.jsx)(n.code,{children:"SCHED_NORMAL"}),"\u3002\u5b9e\u65f6\u4f18\u5148\u7ea7\u8303\u56f40\u5230",(0,r.jsx)(n.code,{children:"MAX_RT_PRIO(100)"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"SCHED_FIFO"}),"\uff1a\u5148\u5165\u5148\u51fa\uff0c",(0,r.jsxs)(n.em,{children:[(0,r.jsx)(n.strong,{children:"\u4e0d\u4f7f\u7528\u65f6\u95f4\u7247"}),"\uff0c\u6bd4\u4efb\u4f55",(0,r.jsx)(n.code,{children:"SCHED_NORMAL"}),"\u7684\u8fdb\u7a0b\u90fd\u5148\u5f97\u5230\u8c03\u5ea6\uff0c\u4e00\u76f4\u6267\u884c\u76f4\u5230\u53d7\u963b\u585e\u6216\u663e\u5f0f\u91ca\u653e"]}),"\u3002",(0,r.jsxs)(n.strong,{children:["\u53ea\u6709\u66f4\u9ad8\u4f18\u5148\u7ea7\u7684",(0,r.jsx)(n.code,{children:"SCHED_FIFO"}),"\u6216",(0,r.jsx)(n.code,{children:"SCHED_RR"}),"\u53ef\u4ee5\u62a2\u5360\u3002"]})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"SCHED_RR"}),"\uff1a",(0,r.jsx)(n.strong,{children:"\u4f7f\u7528\u65f6\u95f4\u7247\uff0c\u8017\u5c3d\u5373\u6b62\u3002"})]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"48-\u4e0e\u8c03\u5ea6\u76f8\u5173\u7684\u7cfb\u7edf\u8c03\u7528",children:"4.8 \u4e0e\u8c03\u5ea6\u76f8\u5173\u7684\u7cfb\u7edf\u8c03\u7528"}),"\n",(0,r.jsx)(n.p,{children:"\u88684-2 \u4e0e\u8c03\u5ea6\u76f8\u5173\u7684\u7cfb\u7edf\u8c03\u7528"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"\u7cfb\u7edf\u8c03\u7528"}),(0,r.jsx)(n.th,{children:"\u63cf\u8ff0"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"nice()"})}),(0,r.jsxs)(n.td,{children:["\u8bbe\u7f6e\u8fdb\u7a0b\u7684 ",(0,r.jsx)(n.code,{children:"nice"}),"\u503c"]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"sched_setscheduler()"})}),(0,r.jsx)(n.td,{children:"\u8bbe\u7f6e\u8c03\u5ea6\u7b56\u7565"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"sched_getscheduler()"})}),(0,r.jsx)(n.td,{children:"\u83b7\u53d6\u8c03\u5ea6\u7b56\u7565"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"sched_setparam()"})}),(0,r.jsx)(n.td,{children:"\u8bbe\u7f6e\u5b9e\u65f6\u4f18\u5148\u7ea7"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"sched_getparam()"})}),(0,r.jsx)(n.td,{children:"\u83b7\u53d6\u5b9e\u65f6\u4f18\u5148\u7ea7"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"sched_get_priority_max()"})}),(0,r.jsx)(n.td,{children:"\u83b7\u53d6\u5b9e\u65f6\u4f18\u5148\u7ea7\u6700\u5927\u503c"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"sched_get_priority_min()"})}),(0,r.jsx)(n.td,{children:"\u83b7\u53d6\u5b9e\u65f6\u4f18\u5148\u7ea7\u6700\u5c0f\u503c"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"sched_rr_get_interval()"})}),(0,r.jsx)(n.td,{children:"\u83b7\u53d6\u8fdb\u7a0b\u7684\u65f6\u95f4\u7247\u503c"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"sched_setaffinity()"})}),(0,r.jsx)(n.td,{children:"\u8bbe\u7f6e\u8fdb\u7a0b\u5904\u7406\u5668\u7684\u4eb2\u548c\u529b"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"sched_getaffinity()"})}),(0,r.jsx)(n.td,{children:"\u83b7\u53d6\u8fdb\u7a0b\u5904\u7406\u5668\u7684\u4eb2\u548c\u529b"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"sched_yield()"})}),(0,r.jsx)(n.td,{children:"\u6682\u65f6\u8ba9\u51fa\u5904\u7406\u5668"})]})]})]}),"\n",(0,r.jsx)(n.h3,{id:"481-\u4e0e\u8c03\u5ea6\u7b56\u7565\u548c\u4f18\u5148\u7ea7\u76f8\u5173\u7684\u7cfb\u7edf\u8c03\u7528",children:"4.8.1 \u4e0e\u8c03\u5ea6\u7b56\u7565\u548c\u4f18\u5148\u7ea7\u76f8\u5173\u7684\u7cfb\u7edf\u8c03\u7528"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"sched_setscheduler()"}),"\u548c",(0,r.jsx)(n.code,{children:"sched_getscheduler()"}),"\u6700\u91cd\u8981\u7684\u5de5\u4f5c\u5728\u4e8e\u8bfb\u53d6\u6216\u6539\u5199\u8fdb\u7a0b",(0,r.jsx)(n.code,{children:"task_struct"}),"\u7684",(0,r.jsx)(n.code,{children:"policy"}),"\u548c",(0,r.jsx)(n.code,{children:"rt_priority"}),"\u503c\u3002"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"sched_setparam()"}),"\u548c",(0,r.jsx)(n.code,{children:"sched_getparam()"}),"\u8bbe\u7f6e\u548c\u83b7\u53d6",(0,r.jsx)(n.code,{children:"struct sched_param {\tint sched_priority;};"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"nice()"}),"\u503c \u53ef\u4ee5\u7ed9\u666e\u901a\u8fdb\u7a0b\u9759\u6001\u4f18\u5148\u7ea7\u589e\u52a0\u4e00\u4e2a\u7ed9\u5b9a\u7684\u503c\u3002",(0,r.jsx)(n.strong,{children:"\u53ea\u6709\u8d85\u7ea7\u7528\u6237\u624d\u80fd\u5728\u8c03\u7528\u5b83\u65f6\u4f7f\u7528\u8d1f\u503c \u4ece\u800c\u63d0\u9ad8\u8fdb\u7a0b\u7684\u4f18\u5148\u7ea7\u3002"})]}),"\n",(0,r.jsx)(n.h3,{id:"482-\u4e0e\u5904\u7406\u5668\u7ed1\u5b9a\u6709\u5173\u7684\u7cfb\u7edf\u8c03\u7528",children:"4.8.2 \u4e0e\u5904\u7406\u5668\u7ed1\u5b9a\u6709\u5173\u7684\u7cfb\u7edf\u8c03\u7528"}),"\n",(0,r.jsxs)(n.p,{children:["\u5c3d\u529b\u901a\u8fc7\u4eb2\u548c\u6027\u4f7f\u8fdb\u7a0b\u5728\u540c\u4e00\u4e2a\u5904\u7406\u5668\u4e0a\u8fd0\u884c\uff0c\u4f46\u4e5f\u5141\u8bb8 \u7528\u6237\u5f3a\u5236\u6307\u5b9a\u201c\u8fd9\u4e2a\u8fdb\u7a0b\u65e0\u8bba\u5982\u4f55\u90fd\u5fc5\u987b\u5728\u8fd9\u4e9b\u5904\u7406\u5668\u4e0a\u8fd0\u884c\u201d\u3002\u4fdd\u5b58\u5728",(0,r.jsx)(n.code,{children:"task_struct.cpus_allowed"}),"\u4e2d\u3002"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"sched_setaffinity()"}),"\u548c",(0,r.jsx)(n.code,{children:"sched_getaffinity"}),"\u8bbe\u7f6e\u548c\u83b7\u53d6\u5f53\u524d",(0,r.jsx)(n.code,{children:"cpus_allowed"}),"\u63a9\u7801\u4f4d\u3002"]}),"\n",(0,r.jsx)(n.h3,{id:"483-\u653e\u5f03\u5904\u7406\u5668\u65f6\u95f4",children:"4.8.3 \u653e\u5f03\u5904\u7406\u5668\u65f6\u95f4"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"sched_yield()"}),"\u901a\u8fc7\u5c06\u8fdb\u7a0b\u4ece\u6d3b\u52a8\u961f\u5217 \u4e2d\u79fb\u5230\u8fc7\u671f\u961f\u5217\u4e2d\u5b9e\u73b0\u3002"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:"/**\n * yield - yield the current processor to other threads.\n *\n * This is a shortcut for kernel-space yielding - it marks the\n * thread runnable and calls sys_sched_yield().\n */\nvoid __sched yield(void)\n{\n        set_current_state(TASK_RUNNING);\n        sys_sched_yield();\n}\nEXPORT_SYMBOL(yield);\n\n/**\n * sys_sched_yield - yield the current processor to other threads.\n *\n * This function yields the current CPU to other tasks. If there are no\n * other threads running on this CPU then this function will return.\n */\nSYSCALL_DEFINE0(sched_yield)\n{\n        struct rq *rq = this_rq_lock();\n\n        schedstat_inc(rq, yld_count);\n\n        /*\n         * \u8fd9\u91cc\u5230\u5e95\u8c03\u7528\u4e86\u4ec0\u4e48\u4e1c\u897f\u5462\uff1f\n         */\n        current->sched_class->yield_task(rq);\n\n        /*\n         * Since we are going to call schedule() anyway, there's\n         * no need to preempt or enable interrupts:\n         */\n        __release(rq->lock);\n        spin_release(&rq->lock.dep_map, 1, _THIS_IP_);\n        do_raw_spin_unlock(&rq->lock);\n        preempt_enable_no_resched();\n\n        schedule();\n\n        return 0;\n}\n"})})]})}function u(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(_,{...e})}):_(e)}},13360:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/fig4.1-8c85c8cd5a2848389ebfc6b2e01d1fa8.png"},28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>d});var s=t(96540);const r={},c=s.createContext(r);function i(e){const n=s.useContext(c);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(c.Provider,{value:n},e.children)}}}]);